{
    "typeName": "TF::Linode::ObjectStorageObject",
    "description": "Provides a Linode Object Storage Object resource. This can be used to create, modify, and delete Linodes Object Storage Objects for Buckets.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/linode/TF-Linode-ObjectStorageObject/docs/README.md",
    "definitions": {
        "MetadataDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AccessKey": {
            "type": "string",
            "description": "The access key to authenticate with."
        },
        "Acl": {
            "type": "string",
            "description": "The canned ACL to apply. (`private`, `public-read`, `authenticated-read`, `public-read-write`, `custom`) (defaults to `private`)."
        },
        "Bucket": {
            "type": "string",
            "description": "The name of the bucket to put the object in."
        },
        "CacheControl": {
            "type": "string",
            "description": "Specifies caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details."
        },
        "Cluster": {
            "type": "string",
            "description": "The cluster the bucket is in."
        },
        "Content": {
            "type": "string",
            "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text."
        },
        "ContentBase64": {
            "type": "string",
            "description": "Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file."
        },
        "ContentDisposition": {
            "type": "string",
            "description": "Specifies presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information."
        },
        "ContentEncoding": {
            "type": "string",
            "description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information."
        },
        "ContentLanguage": {
            "type": "string",
            "description": "The language the content is in e.g. en-US or en-GB."
        },
        "ContentType": {
            "type": "string",
            "description": "A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input."
        },
        "Etag": {
            "type": "string",
            "description": "Used to trigger updates. The only meaningful value is `${filemd5(\"path/to/file\")}` (Terraform 0.11.12 or later) or `${md5(file(\"path/to/file\"))}` (Terraform 0.11.11 or earlier)."
        },
        "ForceDestroy": {
            "type": "boolean",
            "description": "Allow the object to be deleted regardless of any legal hold or object lock (defaults to `false`)."
        },
        "Id": {
            "type": "string"
        },
        "Key": {
            "type": "string",
            "description": "They name of the object once it is in the bucket."
        },
        "Metadata": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/MetadataDefinition"
            },
            "description": "A map of keys/values to provision metadata."
        },
        "SecretKey": {
            "type": "string",
            "description": "The secret key to authenitcate with."
        },
        "Source": {
            "type": "string",
            "description": "The path to a file that will be read and uploaded as raw bytes for the object content. The path must either be relative to the root module or absolute."
        },
        "VersionId": {
            "type": "string"
        },
        "WebsiteRedirect": {
            "type": "string",
            "description": "Specifies a target URL for website redirect."
        }
    },
    "additionalProperties": false,
    "required": [
        "AccessKey",
        "Bucket",
        "Cluster",
        "Key",
        "SecretKey"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/VersionId"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}