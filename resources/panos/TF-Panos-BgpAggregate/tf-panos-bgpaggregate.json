{
    "typeName": "TF::Panos::BgpAggregate",
    "description": "This resource allows you to add/update/delete BGP address aggregation\nrules.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/panos/TF-Panos-BgpAggregate/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AsPathLimit": {
            "type": "number",
            "description": "Add AS path limit attribute if it does\nnot exist."
        },
        "AsPathType": {
            "type": "string",
            "description": "AS path update options.  Valid values are\n`none` (default) or `prepend`."
        },
        "AsPathValue": {
            "type": "string",
            "description": "For `as_path_type` of `prepend`, the value to\nprepend."
        },
        "AsSet": {
            "type": "boolean",
            "description": "Generate AS-set attribute."
        },
        "CommunityType": {
            "type": "string",
            "description": "Community update options.  Valid values are\n`none` (default), `remove-all`, `remove-regex`, `append`, or `overwrite`."
        },
        "CommunityValue": {
            "type": "string",
            "description": "If `community_type` is `remove-regex`,\n`append`, or `overwrite`, the value associated with that setting.  For the\n`append` and `overwrite` types specifically, valid values are\n`no-export`, `no-advertise`, `local-as`, or `nopeer`."
        },
        "Enable": {
            "type": "boolean",
            "description": "Enable this rule (default: `true`)."
        },
        "ExtendedCommunityType": {
            "type": "string",
            "description": "Extended community update options.  Valid\nvalues are `none` (default), `remove-all`, `remove-regex`, `append`, or `overwrite`."
        },
        "ExtendedCommunityValue": {
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "LocalPreference": {
            "type": "string",
            "description": "New local preference value."
        },
        "Med": {
            "type": "string",
            "description": "New MED value."
        },
        "Name": {
            "type": "string",
            "description": "The rule name."
        },
        "NextHop": {
            "type": "string",
            "description": "Next hop address."
        },
        "Origin": {
            "type": "string",
            "description": "New route origin.  Valid values are `incomplete`\n(default), `igp`, or `egp`."
        },
        "Prefix": {
            "type": "string",
            "description": "Aggregating address prefix."
        },
        "Summary": {
            "type": "boolean",
            "description": "Summarize route."
        },
        "VirtualRouter": {
            "type": "string",
            "description": "The virtual router to put the rule into."
        },
        "Weight": {
            "type": "number",
            "description": "New weight value."
        }
    },
    "additionalProperties": false,
    "required": [
        "Name",
        "Prefix",
        "VirtualRouter"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}