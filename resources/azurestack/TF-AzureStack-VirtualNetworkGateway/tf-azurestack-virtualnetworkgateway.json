{
    "typeName": "TF::AzureStack::VirtualNetworkGateway",
    "description": "Manages a Virtual Network Gateway to establish secure, cross-premises connectivity.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/azurestack/TF-AzureStack-VirtualNetworkGateway/docs/README.md",
    "definitions": {
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "BgpSettingsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Asn": {
                    "type": "number"
                },
                "PeerWeight": {
                    "type": "number"
                },
                "PeeringAddress": {
                    "type": "string"
                }
            },
            "required": []
        },
        "IpConfigurationDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Name": {
                    "type": "string",
                    "description": "A user-defined name of the IP configuration. Defaults to vnetGatewayConfig."
                },
                "PrivateIpAddressAllocation": {
                    "type": "string",
                    "description": "Defines how the private IP address of the gateways virtual interface is assigned. Valid options are Static or Dynamic. Defaults to Dynamic."
                },
                "PublicIpAddressId": {
                    "type": "string",
                    "description": "The ID of the public ip address to associate with the Virtual Network Gateway."
                },
                "SubnetId": {
                    "type": "string",
                    "description": "The ID of the gateway subnet of a virtual network in which the virtual network gateway will be created. It is mandatory that the associated subnet is named `GatewaySubnet`. Therefore, each virtual network can contain at most a single Virtual Network Gateway."
                }
            },
            "required": [
                "SubnetId"
            ]
        },
        "VpnClientConfigurationDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AddressSpace": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    }
                },
                "VpnClientProtocols": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    }
                },
                "RevokedCertificate": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "$ref": "#/definitions/RevokedCertificateDefinition"
                    }
                },
                "RootCertificate": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "$ref": "#/definitions/RootCertificateDefinition"
                    }
                }
            },
            "required": [
                "AddressSpace"
            ]
        },
        "RevokedCertificateDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Name": {
                    "type": "string"
                },
                "Thumbprint": {
                    "type": "string"
                }
            },
            "required": [
                "Name",
                "Thumbprint"
            ]
        },
        "RootCertificateDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Name": {
                    "type": "string"
                },
                "PublicCertData": {
                    "type": "string"
                }
            },
            "required": [
                "Name",
                "PublicCertData"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "DefaultLocalNetworkGatewayId": {
            "type": "string"
        },
        "EnableBgp": {
            "type": "boolean",
            "description": "If `true`, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to `false`."
        },
        "Id": {
            "type": "string"
        },
        "Location": {
            "type": "string",
            "description": "The location/region where the connection is located. Changing this forces a new resource to be created."
        },
        "Name": {
            "type": "string",
            "description": "The name of the connection. Changing the name forces a new resource to be created."
        },
        "ResourceGroupName": {
            "type": "string",
            "description": "The name of the resource group in which to create the connection Changing the name forces a new resource to be created."
        },
        "Sku": {
            "type": "string",
            "description": "Configuration of the size and capacity of the virtual network gateway. Valid options are `Basic`, `Standard` and `HighPerformance`."
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "A mapping of tags to assign to the resource."
        },
        "Type": {
            "type": "string",
            "description": "The type of the Virtual Network Gateway. Valid options is `Vpn`."
        },
        "VpnType": {
            "type": "string",
            "description": "The routing type of the Virtual Network Gateway. Only valid option is `RouteBased`."
        },
        "BgpSettings": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/BgpSettingsDefinition"
            },
            "maxItems": 1
        },
        "IpConfiguration": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/IpConfigurationDefinition"
            },
            "maxItems": 2,
            "minItems": 1
        },
        "VpnClientConfiguration": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/VpnClientConfigurationDefinition"
            },
            "maxItems": 1
        }
    },
    "additionalProperties": false,
    "required": [
        "Location",
        "Name",
        "ResourceGroupName",
        "Sku",
        "Type"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}