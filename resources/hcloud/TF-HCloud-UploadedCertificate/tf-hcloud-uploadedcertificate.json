{
    "typeName": "TF::HCloud::UploadedCertificate",
    "description": "Upload a TLS certificate to Hetzner Cloud.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/hcloud/TF-HCloud-UploadedCertificate/docs/README.md",
    "definitions": {
        "LabelsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Certificate": {
            "type": "string",
            "description": "PEM encoded TLS certificate.\n- `labels` - (Optional, map) User-defined labels (key-value pairs) the\ncertificate should be created with."
        },
        "Created": {
            "type": "string"
        },
        "DomainNames": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            }
        },
        "Fingerprint": {
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "Labels": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/LabelsDefinition"
            },
            "description": "User-defined labels (key-value pairs) the\ncertificate should be created with."
        },
        "Name": {
            "type": "string",
            "description": "Name of the Certificate.\n- `private_key` - (Required, string) PEM encoded private key belonging to the certificate.\n- `certificate` - (Required, string) PEM encoded TLS certificate.\n- `labels` - (Optional, map) User-defined labels (key-value pairs) the\ncertificate should be created with."
        },
        "NotValidAfter": {
            "type": "string"
        },
        "NotValidBefore": {
            "type": "string"
        },
        "PrivateKey": {
            "type": "string",
            "description": "PEM encoded private key belonging to the certificate.\n- `certificate` - (Required, string) PEM encoded TLS certificate.\n- `labels` - (Optional, map) User-defined labels (key-value pairs) the\ncertificate should be created with."
        },
        "Type": {
            "type": "string"
        }
    },
    "additionalProperties": false,
    "required": [
        "Certificate",
        "Name",
        "PrivateKey"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Created",
        "/properties/DomainNames",
        "/properties/Fingerprint",
        "/properties/Id",
        "/properties/NotValidAfter",
        "/properties/NotValidBefore",
        "/properties/Type"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/properties/PrivateKey"
    ]
}