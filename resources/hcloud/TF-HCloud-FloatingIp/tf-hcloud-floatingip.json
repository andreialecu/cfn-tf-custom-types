{
    "typeName": "TF::HCloud::FloatingIp",
    "description": "Provides a Hetzner Cloud Floating IP to represent a publicly-accessible static IP address that can be mapped to one of your servers.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/hcloud/TF-HCloud-FloatingIp/docs/README.md",
    "definitions": {
        "LabelsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Description": {
            "type": "string",
            "description": "Description of the Floating IP.\n- `labels` - (Optional, map) User-defined labels (key-value pairs) should be created with."
        },
        "HomeLocation": {
            "type": "string",
            "description": "Home location (routing is optimized for that location). Optional if server_id argument is passed.\n- `description` - (Optional, string) Description of the Floating IP.\n- `labels` - (Optional, map) User-defined labels (key-value pairs) should be created with."
        },
        "Id": {
            "type": "string"
        },
        "IpAddress": {
            "type": "string"
        },
        "IpNetwork": {
            "type": "string"
        },
        "Labels": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/LabelsDefinition"
            },
            "description": "User-defined labels (key-value pairs) should be created with."
        },
        "Name": {
            "type": "string",
            "description": "Name of the Floating IP.\n- `server_id` - (Optional, int) Server to assign the Floating IP to.\n- `home_location` - (Optional, string) Home location (routing is optimized for that location). Optional if server_id argument is passed.\n- `description` - (Optional, string) Description of the Floating IP.\n- `labels` - (Optional, map) User-defined labels (key-value pairs) should be created with."
        },
        "ServerId": {
            "type": "number",
            "description": "Server to assign the Floating IP to.\n- `home_location` - (Optional, string) Home location (routing is optimized for that location). Optional if server_id argument is passed.\n- `description` - (Optional, string) Description of the Floating IP.\n- `labels` - (Optional, map) User-defined labels (key-value pairs) should be created with."
        },
        "Type": {
            "type": "string",
            "description": "Type of the Floating IP. `ipv4` `ipv6`\n- `name` - (Optional, string) Name of the Floating IP.\n- `server_id` - (Optional, int) Server to assign the Floating IP to.\n- `home_location` - (Optional, string) Home location (routing is optimized for that location). Optional if server_id argument is passed.\n- `description` - (Optional, string) Description of the Floating IP.\n- `labels` - (Optional, map) User-defined labels (key-value pairs) should be created with."
        }
    },
    "additionalProperties": false,
    "required": [
        "Type"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/IpAddress",
        "/properties/IpNetwork"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}