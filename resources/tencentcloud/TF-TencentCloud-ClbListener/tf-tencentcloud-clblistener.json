{
    "typeName": "TF::TencentCloud::ClbListener",
    "description": "Provides a resource to create a CLB listener.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/tencentcloud/TF-TencentCloud-ClbListener/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "CertificateCaId": {
            "type": "string",
            "description": "ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`."
        },
        "CertificateId": {
            "type": "string",
            "description": "ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available."
        },
        "CertificateSslMode": {
            "type": "string",
            "description": "Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available."
        },
        "ClbId": {
            "type": "string",
            "description": "ID of the CLB."
        },
        "HealthCheckContextType": {
            "type": "string",
            "description": "Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`."
        },
        "HealthCheckHealthNum": {
            "type": "number",
            "description": "Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule."
        },
        "HealthCheckHttpCode": {
            "type": "number",
            "description": "HTTP health check code of TCP listener. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx."
        },
        "HealthCheckHttpDomain": {
            "type": "string",
            "description": "HTTP health check domain of TCP listener."
        },
        "HealthCheckHttpMethod": {
            "type": "string",
            "description": "HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`."
        },
        "HealthCheckHttpPath": {
            "type": "string",
            "description": "HTTP health check path of TCP listener."
        },
        "HealthCheckHttpVersion": {
            "type": "string",
            "description": "The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`."
        },
        "HealthCheckIntervalTime": {
            "type": "number",
            "description": "Interval time of health check. Valid value ranges: [5~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`."
        },
        "HealthCheckPort": {
            "type": "number",
            "description": "The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener."
        },
        "HealthCheckRecvContext": {
            "type": "string",
            "description": "It represents the result returned by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits."
        },
        "HealthCheckSendContext": {
            "type": "string",
            "description": "It represents the content of the request sent by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits."
        },
        "HealthCheckSwitch": {
            "type": "boolean",
            "description": "Indicates whether health check is enabled."
        },
        "HealthCheckTimeOut": {
            "type": "number",
            "description": "Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol."
        },
        "HealthCheckType": {
            "type": "string",
            "description": "Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`."
        },
        "HealthCheckUnhealthNum": {
            "type": "number",
            "description": "Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`."
        },
        "Id": {
            "type": "string"
        },
        "ListenerId": {
            "type": "string"
        },
        "ListenerName": {
            "type": "string",
            "description": "Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'."
        },
        "Port": {
            "type": "number",
            "description": "Port of the CLB listener."
        },
        "Protocol": {
            "type": "string",
            "description": "Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS` and `TCP_SSL`."
        },
        "Scheduler": {
            "type": "string",
            "description": "Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`."
        },
        "SessionExpireTime": {
            "type": "number",
            "description": "Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`."
        },
        "SniSwitch": {
            "type": "boolean",
            "description": "Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `tencentcloud_clb_listener_rule`, otherwise all rules have a certificate."
        },
        "TargetType": {
            "type": "string",
            "description": "Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule."
        }
    },
    "additionalProperties": false,
    "required": [
        "ClbId",
        "ListenerName",
        "Protocol"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/ListenerId"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}