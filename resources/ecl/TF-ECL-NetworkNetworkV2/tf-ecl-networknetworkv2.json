{
    "typeName": "TF::ECL::NetworkNetworkV2",
    "description": "Manages a V2 network resource within Enterprise Cloud.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/ecl/TF-ECL-NetworkNetworkV2/docs/README.md",
    "definitions": {
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AdminStateUp": {
            "type": "boolean",
            "description": "The administrative state of the network.\nAcceptable values are \"true\" and \"false\".\nChanging this value updates the state of the existing network."
        },
        "Description": {
            "type": "string",
            "description": "Network description."
        },
        "Id": {
            "type": "string"
        },
        "Name": {
            "type": "string",
            "description": "The name of the network. Changing this updates the name of\nthe existing network."
        },
        "Plane": {
            "type": "string",
            "description": "The plane of the network.\nAllowed values are \"data\" and \"storage\".\nChanging this creates a new network."
        },
        "Region": {
            "type": "string",
            "description": "The region in which to obtain the V2 Networking client.\nA Networking client is needed to create a Neutron network. If omitted, the\n`region` argument of the provider is used. Changing this creates a new\nnetwork."
        },
        "Shared": {
            "type": "boolean"
        },
        "Status": {
            "type": "string"
        },
        "Subnets": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            }
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "Network tags."
        },
        "TenantId": {
            "type": "string",
            "description": "The owner of the network. Required if admin wants to\ncreate a network for another tenant. Changing this creates a new network."
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/Shared",
        "/properties/Status",
        "/properties/Subnets"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}