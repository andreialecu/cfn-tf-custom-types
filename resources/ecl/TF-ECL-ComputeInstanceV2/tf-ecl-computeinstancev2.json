{
    "typeName": "TF::ECL::ComputeInstanceV2",
    "description": "Manages a V2 Instance resource within Enterprise Cloud.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/ecl/TF-ECL-ComputeInstanceV2/docs/README.md",
    "definitions": {
        "AllMetadataDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "MetadataDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "BlockDeviceDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "BootIndex": {
                    "type": "number",
                    "description": "The boot index of the volume. It defaults to 0.\nChanging this creates a new server."
                },
                "DeleteOnTermination": {
                    "type": "boolean",
                    "description": "Delete the volume / block device upon\ntermination of the instance. Defaults to false. Changing this creates a\nnew server."
                },
                "DestinationType": {
                    "type": "string",
                    "description": "The type that gets created. Possible values\nare \"volume\" and \"local\". Changing this creates a new server."
                },
                "SourceType": {
                    "type": "string",
                    "description": "The source type of the device. Must be one of\n\"blank\", \"image\", \"volume\", or \"snapshot\". Changing this creates a new\nserver."
                },
                "Uuid": {
                    "type": "string",
                    "description": "The UUID of\nthe image, volume, or snapshot. Changing this creates a new server."
                },
                "VolumeSize": {
                    "type": "number",
                    "description": "The size of the volume to create (in gigabytes). Required\nin the following combinations: source=image and destination=volume,\nsource=blank and destination=local, and source=blank and destination=volume.\nChanging this creates a new server."
                }
            },
            "required": [
                "SourceType"
            ]
        },
        "NetworkDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AccessNetwork": {
                    "type": "boolean",
                    "description": "Specifies if this network should be used for\nprovisioning access. Accepts true or false. Defaults to false."
                },
                "FixedIpV4": {
                    "type": "string",
                    "description": "Specifies a fixed IPv4 address to be used on this\nnetwork. Changing this creates a new server."
                },
                "Name": {
                    "type": "string",
                    "description": "The human-readable\nname of the network. Changing this creates a new server."
                },
                "Port": {
                    "type": "string",
                    "description": "The port UUID of a\nnetwork to attach to the server. Changing this creates a new server."
                },
                "Uuid": {
                    "type": "string",
                    "description": "The network UUID to\nattach to the server. Changing this creates a new server."
                }
            },
            "required": []
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        },
        "VolumeDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Device": {
                    "type": "string"
                },
                "Id": {
                    "type": "string"
                },
                "VolumeId": {
                    "type": "string"
                }
            },
            "required": [
                "VolumeId"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AccessIpV4": {
            "type": "string"
        },
        "AllMetadata": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/AllMetadataDefinition"
            }
        },
        "AvailabilityZone": {
            "type": "string",
            "description": "The availability zone in which to create\nthe server. Changing this creates a new server."
        },
        "ConfigDrive": {
            "type": "boolean",
            "description": "If true is specified, a configuration drive will be mounted\nto enable metadata injection in the server. Defaults to false."
        },
        "FlavorId": {
            "type": "string",
            "description": "The flavor ID of\nthe desired flavor for the server. Changing this resizes the existing server."
        },
        "FlavorName": {
            "type": "string",
            "description": "The name of the\ndesired flavor for the server. Changing this resizes the existing server."
        },
        "Id": {
            "type": "string"
        },
        "ImageId": {
            "type": "string",
            "description": "The image ID of\nthe desired image for the server. Changing this creates a new server."
        },
        "ImageName": {
            "type": "string",
            "description": "The name of the\ndesired image for the server. Changing this creates a new server."
        },
        "KeyPair": {
            "type": "string",
            "description": "The name of a key pair to put on the server. The key\npair must already be created and associated with the tenant's account.\nChanging this creates a new server."
        },
        "Metadata": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/MetadataDefinition"
            },
            "description": "Metadata key/value pairs to make available from\nwithin the instance. Changing this updates the existing server metadata."
        },
        "Name": {
            "type": "string",
            "description": "A unique name for the resource."
        },
        "PowerState": {
            "type": "string",
            "description": "Provide the VM state. Only 'active' and 'shutoff'\nare supported values. *Note*: If the initial power_state is the shutoff\nthe VM will be stopped immediately after build and the provisioners like\nremote-exec or files are not supported."
        },
        "Region": {
            "type": "string",
            "description": "The region in which to create the server instance. If\nomitted, the `region` argument of the provider is used. Changing this\ncreates a new server."
        },
        "StopBeforeDestroy": {
            "type": "boolean",
            "description": "Whether to try stop instance gracefully\nbefore destroying it, thus giving chance for guest OS daemons to stop correctly.\nIf instance doesn't stop within timeout, it will be destroyed anyway."
        },
        "UserData": {
            "type": "string",
            "description": "The user data to provide when launching the instance.\nChanging this creates a new server."
        },
        "BlockDevice": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/BlockDeviceDefinition"
            }
        },
        "Network": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/NetworkDefinition"
            }
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        },
        "Volume": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/VolumeDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "Name"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/AccessIpV4",
        "/properties/AllMetadata",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}