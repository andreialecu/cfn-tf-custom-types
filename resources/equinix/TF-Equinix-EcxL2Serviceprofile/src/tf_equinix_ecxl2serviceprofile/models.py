# DO NOT modify this file by hand, changes will be overwritten
import sys
from dataclasses import dataclass
from inspect import getmembers, isclass
from typing import (
    AbstractSet,
    Any,
    Generic,
    Mapping,
    MutableMapping,
    Optional,
    Sequence,
    Type,
    TypeVar,
)

from cloudformation_cli_python_lib.interface import (
    BaseModel,
    BaseResourceHandlerRequest,
)
from cloudformation_cli_python_lib.recast import recast_object
from cloudformation_cli_python_lib.utils import deserialize_list

T = TypeVar("T")


def set_or_none(value: Optional[Sequence[T]]) -> Optional[AbstractSet[T]]:
    if value:
        return set(value)
    return None


@dataclass
class ResourceHandlerRequest(BaseResourceHandlerRequest):
    # pylint: disable=invalid-name
    desiredResourceState: Optional["ResourceModel"]
    previousResourceState: Optional["ResourceModel"]


@dataclass
class ResourceModel(BaseModel):
    tfcfnid: Optional[str]
    ApiIntegration: Optional[bool]
    AuthkeyLabel: Optional[str]
    BandwidthAlertThreshold: Optional[float]
    BandwidthThresholdNotifications: Optional[Sequence[str]]
    ConnectionNameLabel: Optional[str]
    CtagLabel: Optional[str]
    Description: Optional[str]
    EquinixManagedPortVlan: Optional[bool]
    Id: Optional[str]
    IntegrationId: Optional[str]
    Name: Optional[str]
    Oversubscription: Optional[str]
    OversubscriptionAllowed: Optional[bool]
    Private: Optional[bool]
    PrivateUserEmails: Optional[Sequence[str]]
    ProfileStatuschangeNotifications: Optional[Sequence[str]]
    RedundancyRequired: Optional[bool]
    SecondaryVlanFromPrimary: Optional[bool]
    ServicekeyAutogenerated: Optional[bool]
    SpeedCustomizationAllowed: Optional[bool]
    SpeedFromApi: Optional[bool]
    State: Optional[str]
    TagType: Optional[str]
    Uuid: Optional[str]
    VcStatuschangeNotifications: Optional[Sequence[str]]
    Features: Optional[Sequence["_FeaturesDefinition"]]
    Port: Optional[Sequence["_PortDefinition"]]
    SpeedBand: Optional[Sequence["_SpeedBandDefinition"]]

    @classmethod
    def _deserialize(
        cls: Type["_ResourceModel"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_ResourceModel"]:
        if not json_data:
            return None
        dataclasses = {n: o for n, o in getmembers(sys.modules[__name__]) if isclass(o)}
        recast_object(cls, json_data, dataclasses)
        return cls(
            tfcfnid=json_data.get("tfcfnid"),
            ApiIntegration=json_data.get("ApiIntegration"),
            AuthkeyLabel=json_data.get("AuthkeyLabel"),
            BandwidthAlertThreshold=json_data.get("BandwidthAlertThreshold"),
            BandwidthThresholdNotifications=json_data.get("BandwidthThresholdNotifications"),
            ConnectionNameLabel=json_data.get("ConnectionNameLabel"),
            CtagLabel=json_data.get("CtagLabel"),
            Description=json_data.get("Description"),
            EquinixManagedPortVlan=json_data.get("EquinixManagedPortVlan"),
            Id=json_data.get("Id"),
            IntegrationId=json_data.get("IntegrationId"),
            Name=json_data.get("Name"),
            Oversubscription=json_data.get("Oversubscription"),
            OversubscriptionAllowed=json_data.get("OversubscriptionAllowed"),
            Private=json_data.get("Private"),
            PrivateUserEmails=json_data.get("PrivateUserEmails"),
            ProfileStatuschangeNotifications=json_data.get("ProfileStatuschangeNotifications"),
            RedundancyRequired=json_data.get("RedundancyRequired"),
            SecondaryVlanFromPrimary=json_data.get("SecondaryVlanFromPrimary"),
            ServicekeyAutogenerated=json_data.get("ServicekeyAutogenerated"),
            SpeedCustomizationAllowed=json_data.get("SpeedCustomizationAllowed"),
            SpeedFromApi=json_data.get("SpeedFromApi"),
            State=json_data.get("State"),
            TagType=json_data.get("TagType"),
            Uuid=json_data.get("Uuid"),
            VcStatuschangeNotifications=json_data.get("VcStatuschangeNotifications"),
            Features=deserialize_list(json_data.get("Features"), FeaturesDefinition),
            Port=deserialize_list(json_data.get("Port"), PortDefinition),
            SpeedBand=deserialize_list(json_data.get("SpeedBand"), SpeedBandDefinition),
        )


# work around possible type aliasing issues when variable has same name as a model
_ResourceModel = ResourceModel


@dataclass
class FeaturesDefinition(BaseModel):
    AllowRemoteConnections: Optional[bool]
    TestProfile: Optional[bool]

    @classmethod
    def _deserialize(
        cls: Type["_FeaturesDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_FeaturesDefinition"]:
        if not json_data:
            return None
        return cls(
            AllowRemoteConnections=json_data.get("AllowRemoteConnections"),
            TestProfile=json_data.get("TestProfile"),
        )


# work around possible type aliasing issues when variable has same name as a model
_FeaturesDefinition = FeaturesDefinition


@dataclass
class PortDefinition(BaseModel):
    MetroCode: Optional[str]
    Uuid: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_PortDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_PortDefinition"]:
        if not json_data:
            return None
        return cls(
            MetroCode=json_data.get("MetroCode"),
            Uuid=json_data.get("Uuid"),
        )


# work around possible type aliasing issues when variable has same name as a model
_PortDefinition = PortDefinition


@dataclass
class SpeedBandDefinition(BaseModel):
    Speed: Optional[float]
    SpeedUnit: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_SpeedBandDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_SpeedBandDefinition"]:
        if not json_data:
            return None
        return cls(
            Speed=json_data.get("Speed"),
            SpeedUnit=json_data.get("SpeedUnit"),
        )


# work around possible type aliasing issues when variable has same name as a model
_SpeedBandDefinition = SpeedBandDefinition


