{
    "typeName": "TF::Consul::KeyPrefix",
    "description": "Allows Terraform to manage a \"namespace\" of Consul keys that share a common\nname prefix.\n\nLike `consul_keys`, this resource can write values into the Consul key/value\nstore, but *unlike* `consul_keys` this resource can detect and remove extra\nkeys that have been added some other way, thus ensuring that rogue data\nadded outside of Terraform will be removed on the next run.\n\nThis resource is thus useful in the case where Terraform is exclusively\nmanaging a set of related keys.\n\nTo avoid accidentally clobbering matching data that existed in Consul before\na `consul_key_prefix` resource was created, creation of a key prefix instance\nwill fail if any matching keys are already present in the key/value store.\nIf any conflicting data is present, you must first delete it manually or\nexplicitly import the prefix.\n\n~> **Warning** After this resource is instantiated, Terraform takes control\nover *all* keys with the given path prefix, and will remove any matching keys\nthat are not present in the configuration. It will ...",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/consul/TF-Consul-KeyPrefix/docs/README.md",
    "definitions": {
        "SubkeysDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "SubkeyDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Flags": {
                    "type": "number",
                    "description": "An [unsigned integer value](https://www.consul.io/api/kv.html#flags-1)\nto attach to the key (defaults to 0)."
                },
                "Path": {
                    "type": "string",
                    "description": "This is the path (which will be appended to the given\n`path_prefix`) in Consul that should be written to."
                },
                "Value": {
                    "type": "string",
                    "description": "The value to write to the given path."
                }
            },
            "required": [
                "Path",
                "Value"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Datacenter": {
            "type": "string",
            "description": "The datacenter to use. This overrides the\nagent's default datacenter and the datacenter in the provider setup."
        },
        "Id": {
            "type": "string"
        },
        "Namespace": {
            "type": "string",
            "description": "The namespace to create the keys within."
        },
        "PathPrefix": {
            "type": "string",
            "description": "Specifies the common prefix shared by all keys\nthat will be managed by this resource instance. In most cases this will\nend with a slash, to manage a \"folder\" of keys."
        },
        "Subkeys": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/SubkeysDefinition"
            },
            "description": "A mapping from subkey name (which will be appended\nto the given `path_prefix`) to the value that should be stored at that key.\nUse slashes, as shown in the above example, to create \"sub-folders\" under\nthe given path prefix."
        },
        "Token": {
            "type": "string",
            "description": "The ACL token to use. This overrides the\ntoken that the agent provides by default."
        },
        "Subkey": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/SubkeyDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "PathPrefix"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/properties/Token"
    ]
}