{
    "typeName": "TF::FortiOS::UserSetting",
    "description": "Configure user authentication setting.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/fortios/TF-FortiOS-UserSetting/docs/README.md",
    "definitions": {
        "AuthPortsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Id": {
                    "type": "number",
                    "description": "ID."
                },
                "Port": {
                    "type": "number",
                    "description": "Non-standard port for firewall user authentication."
                },
                "Type": {
                    "type": "string",
                    "description": "Service type. Valid values: `http`, `https`, `ftp`, `telnet`."
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AuthBlackoutTime": {
            "type": "number",
            "description": "Time in seconds an IP address is denied access after failing to authenticate five times within one minute."
        },
        "AuthCaCert": {
            "type": "string",
            "description": "HTTPS CA certificate for policy authentication."
        },
        "AuthCert": {
            "type": "string",
            "description": "HTTPS server certificate for policy authentication."
        },
        "AuthHttpBasic": {
            "type": "string",
            "description": "Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`."
        },
        "AuthInvalidMax": {
            "type": "number",
            "description": "Maximum number of failed authentication attempts before the user is blocked."
        },
        "AuthLockoutDuration": {
            "type": "number",
            "description": "Lockout period in seconds after too many login failures."
        },
        "AuthLockoutThreshold": {
            "type": "number",
            "description": "Maximum number of failed login attempts before login lockout is triggered."
        },
        "AuthOnDemand": {
            "type": "string",
            "description": "Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`."
        },
        "AuthPortalTimeout": {
            "type": "number",
            "description": "Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min)."
        },
        "AuthSecureHttp": {
            "type": "string",
            "description": "Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`."
        },
        "AuthSrcMac": {
            "type": "string",
            "description": "Enable/disable source MAC for user identity. Valid values: `enable`, `disable`."
        },
        "AuthSslAllowRenegotiation": {
            "type": "string",
            "description": "Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`."
        },
        "AuthSslMinProtoVersion": {
            "type": "string",
            "description": "Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`."
        },
        "AuthTimeout": {
            "type": "number",
            "description": "Time in minutes before the firewall user authentication timeout requires the user to re-authenticate."
        },
        "AuthTimeoutType": {
            "type": "string",
            "description": "Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`."
        },
        "AuthType": {
            "type": "string",
            "description": "Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`."
        },
        "DynamicSortSubtable": {
            "type": "string",
            "description": "true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables."
        },
        "Id": {
            "type": "string"
        },
        "PerPolicyDisclaimer": {
            "type": "string",
            "description": "Enable/disable per policy disclaimer. Valid values: `enable`, `disable`."
        },
        "RadiusSesTimeoutAct": {
            "type": "string",
            "description": "Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`."
        },
        "Vdomparam": {
            "type": "string",
            "description": "Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter."
        },
        "AuthPorts": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/AuthPortsDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}