{
    "typeName": "TF::FortiOS::Switchcontroller8021Xsettings",
    "description": "Configure global 802.1X settings.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/fortios/TF-FortiOS-Switchcontroller8021Xsettings/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "LinkDownAuth": {
            "type": "string",
            "description": "Interface-reauthentication state to set if a link is down. Valid values: `set-unauth`, `no-action`."
        },
        "MaxReauthAttempt": {
            "type": "number",
            "description": "Maximum number of authentication attempts (0 - 15, default = 3)."
        },
        "ReauthPeriod": {
            "type": "number",
            "description": "Period of time to allow for reauthentication (1 - 1440 sec, default = 60, 0 = disable reauthentication)."
        },
        "TxPeriod": {
            "type": "number",
            "description": "802.1X Tx period (seconds, default=30)."
        },
        "Vdomparam": {
            "type": "string",
            "description": "Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter."
        }
    },
    "additionalProperties": false,
    "required": [],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}