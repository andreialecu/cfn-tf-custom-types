# DO NOT modify this file by hand, changes will be overwritten
import sys
from dataclasses import dataclass
from inspect import getmembers, isclass
from typing import (
    AbstractSet,
    Any,
    Generic,
    Mapping,
    MutableMapping,
    Optional,
    Sequence,
    Type,
    TypeVar,
)

from cloudformation_cli_python_lib.interface import (
    BaseModel,
    BaseResourceHandlerRequest,
)
from cloudformation_cli_python_lib.recast import recast_object
from cloudformation_cli_python_lib.utils import deserialize_list

T = TypeVar("T")


def set_or_none(value: Optional[Sequence[T]]) -> Optional[AbstractSet[T]]:
    if value:
        return set(value)
    return None


@dataclass
class ResourceHandlerRequest(BaseResourceHandlerRequest):
    # pylint: disable=invalid-name
    desiredResourceState: Optional["ResourceModel"]
    previousResourceState: Optional["ResourceModel"]


@dataclass
class ResourceModel(BaseModel):
    tfcfnid: Optional[str]
    AcName: Optional[str]
    Aggregate: Optional[str]
    Algorithm: Optional[str]
    Alias: Optional[str]
    Allowaccess: Optional[str]
    ApDiscover: Optional[str]
    Arpforward: Optional[str]
    AuthType: Optional[str]
    AutoAuthExtensionDevice: Optional[str]
    Autogenerated: Optional[str]
    BandwidthMeasureTime: Optional[float]
    Bfd: Optional[str]
    BfdDesiredMinTx: Optional[float]
    BfdDetectMult: Optional[float]
    BfdRequiredMinRx: Optional[float]
    BroadcastForticlientDiscovery: Optional[str]
    BroadcastForward: Optional[str]
    CaptivePortal: Optional[float]
    CliConnStatus: Optional[float]
    Color: Optional[float]
    DedicatedTo: Optional[str]
    Defaultgw: Optional[str]
    Description: Optional[str]
    DetectedPeerMtu: Optional[float]
    Detectprotocol: Optional[str]
    Detectserver: Optional[str]
    DeviceAccessList: Optional[str]
    DeviceIdentification: Optional[str]
    DeviceIdentificationActiveScan: Optional[str]
    DeviceNetscan: Optional[str]
    DeviceUserIdentification: Optional[str]
    Devindex: Optional[float]
    DhcpClientIdentifier: Optional[str]
    DhcpRelayAgentOption: Optional[str]
    DhcpRelayInterface: Optional[str]
    DhcpRelayInterfaceSelectMethod: Optional[str]
    DhcpRelayIp: Optional[str]
    DhcpRelayService: Optional[str]
    DhcpRelayType: Optional[str]
    DhcpRenewTime: Optional[float]
    DiscRetryTimeout: Optional[float]
    DisconnectThreshold: Optional[float]
    Distance: Optional[float]
    DnsServerOverride: Optional[str]
    DropFragment: Optional[str]
    DropOverlappedFragment: Optional[str]
    DynamicSortSubtable: Optional[str]
    EgressShapingProfile: Optional[str]
    EndpointCompliance: Optional[str]
    EstimatedDownstreamBandwidth: Optional[float]
    EstimatedUpstreamBandwidth: Optional[float]
    ExplicitFtpProxy: Optional[str]
    ExplicitWebProxy: Optional[str]
    External: Optional[str]
    FailActionOnExtender: Optional[str]
    FailAlertMethod: Optional[str]
    FailDetect: Optional[str]
    FailDetectOption: Optional[str]
    Fortiheartbeat: Optional[str]
    Fortilink: Optional[str]
    FortilinkBackupLink: Optional[float]
    FortilinkNeighborDetect: Optional[str]
    FortilinkSplitInterface: Optional[str]
    FortilinkStacking: Optional[str]
    ForwardDomain: Optional[float]
    Gwdetect: Optional[str]
    HaPriority: Optional[float]
    IcmpAcceptRedirect: Optional[str]
    IcmpSendRedirect: Optional[str]
    Id: Optional[str]
    IdentAccept: Optional[str]
    IdleTimeout: Optional[float]
    Inbandwidth: Optional[float]
    IngressShapingProfile: Optional[str]
    IngressSpilloverThreshold: Optional[float]
    Interface: Optional[str]
    Internal: Optional[float]
    Ip: Optional[str]
    IpManagedByFortiipam: Optional[str]
    Ipmac: Optional[str]
    IpsSnifferMode: Optional[str]
    Ipunnumbered: Optional[str]
    L2forward: Optional[str]
    LacpHaSlave: Optional[str]
    LacpMode: Optional[str]
    LacpSpeed: Optional[str]
    LcpEchoInterval: Optional[float]
    LcpMaxEchoFails: Optional[float]
    LinkUpDelay: Optional[float]
    LldpNetworkPolicy: Optional[str]
    LldpReception: Optional[str]
    LldpTransmission: Optional[str]
    Macaddr: Optional[str]
    ManagedSubnetworkSize: Optional[str]
    ManagementIp: Optional[str]
    MeasuredDownstreamBandwidth: Optional[float]
    MeasuredUpstreamBandwidth: Optional[float]
    MinLinks: Optional[float]
    MinLinksDown: Optional[str]
    Mode: Optional[str]
    MonitorBandwidth: Optional[str]
    Mtu: Optional[float]
    MtuOverride: Optional[str]
    Name: Optional[str]
    Ndiscforward: Optional[str]
    NetbiosForward: Optional[str]
    NetflowSampler: Optional[str]
    Outbandwidth: Optional[float]
    PadtRetryTimeout: Optional[float]
    Password: Optional[str]
    PingServStatus: Optional[float]
    PollingInterval: Optional[float]
    PppoeUnnumberedNegotiate: Optional[str]
    PptpAuthType: Optional[str]
    PptpClient: Optional[str]
    PptpPassword: Optional[str]
    PptpServerIp: Optional[str]
    PptpTimeout: Optional[float]
    PptpUser: Optional[str]
    PreserveSessionRoute: Optional[str]
    Priority: Optional[float]
    PriorityOverride: Optional[str]
    ProxyCaptivePortal: Optional[str]
    RedundantInterface: Optional[str]
    RemoteIp: Optional[str]
    ReplacemsgOverrideGroup: Optional[str]
    RingRx: Optional[float]
    RingTx: Optional[float]
    Role: Optional[str]
    SampleDirection: Optional[str]
    SampleRate: Optional[float]
    ScanBotnetConnections: Optional[str]
    SecondaryIp: Optional[str]
    SecurityExemptList: Optional[str]
    SecurityExternalLogout: Optional[str]
    SecurityExternalWeb: Optional[str]
    SecurityMacAuthBypass: Optional[str]
    SecurityMode: Optional[str]
    SecurityRedirectUrl: Optional[str]
    ServiceName: Optional[str]
    SflowSampler: Optional[str]
    SnmpIndex: Optional[float]
    Speed: Optional[str]
    SpilloverThreshold: Optional[float]
    SrcCheck: Optional[str]
    Status: Optional[str]
    Stpforward: Optional[str]
    StpforwardMode: Optional[str]
    Subst: Optional[str]
    SubstituteDstMac: Optional[str]
    SwcFirstCreate: Optional[float]
    SwcVlan: Optional[float]
    Switch: Optional[str]
    SwitchControllerAccessVlan: Optional[str]
    SwitchControllerArpInspection: Optional[str]
    SwitchControllerDhcpSnooping: Optional[str]
    SwitchControllerDhcpSnoopingOption82: Optional[str]
    SwitchControllerDhcpSnoopingVerifyMac: Optional[str]
    SwitchControllerFeature: Optional[str]
    SwitchControllerIgmpSnooping: Optional[str]
    SwitchControllerIgmpSnoopingFastLeave: Optional[str]
    SwitchControllerIgmpSnoopingProxy: Optional[str]
    SwitchControllerIotScanning: Optional[str]
    SwitchControllerLearningLimit: Optional[float]
    SwitchControllerMgmtVlan: Optional[float]
    SwitchControllerNac: Optional[str]
    SwitchControllerRspanMode: Optional[str]
    SwitchControllerSourceIp: Optional[str]
    SwitchControllerTrafficPolicy: Optional[str]
    TcpMss: Optional[float]
    TrustIp61: Optional[str]
    TrustIp62: Optional[str]
    TrustIp63: Optional[str]
    TrustIp1: Optional[str]
    TrustIp2: Optional[str]
    TrustIp3: Optional[str]
    Type: Optional[str]
    Username: Optional[str]
    Vdom: Optional[str]
    Vdomparam: Optional[str]
    Vindex: Optional[float]
    VlanProtocol: Optional[str]
    Vlanforward: Optional[str]
    Vlanid: Optional[float]
    Vrf: Optional[float]
    VrrpVirtualMac: Optional[str]
    Wccp: Optional[str]
    Weight: Optional[float]
    WinsIp: Optional[str]
    ClientOptions: Optional[Sequence["_ClientOptionsDefinition"]]
    FailAlertInterfaces: Optional[Sequence["_FailAlertInterfacesDefinition"]]
    Ipv6: Optional[Sequence["_Ipv6Definition"]]
    ManagedDevice: Optional[Sequence["_ManagedDeviceDefinition"]]
    Member: Optional[Sequence["_MemberDefinition"]]
    Secondaryip: Optional[Sequence["_SecondaryipDefinition"]]
    SecurityGroups: Optional[Sequence["_SecurityGroupsDefinition"]]
    Tagging: Optional[Sequence["_TaggingDefinition"]]
    Vrrp: Optional[Sequence["_VrrpDefinition"]]

    @classmethod
    def _deserialize(
        cls: Type["_ResourceModel"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_ResourceModel"]:
        if not json_data:
            return None
        dataclasses = {n: o for n, o in getmembers(sys.modules[__name__]) if isclass(o)}
        recast_object(cls, json_data, dataclasses)
        return cls(
            tfcfnid=json_data.get("tfcfnid"),
            AcName=json_data.get("AcName"),
            Aggregate=json_data.get("Aggregate"),
            Algorithm=json_data.get("Algorithm"),
            Alias=json_data.get("Alias"),
            Allowaccess=json_data.get("Allowaccess"),
            ApDiscover=json_data.get("ApDiscover"),
            Arpforward=json_data.get("Arpforward"),
            AuthType=json_data.get("AuthType"),
            AutoAuthExtensionDevice=json_data.get("AutoAuthExtensionDevice"),
            Autogenerated=json_data.get("Autogenerated"),
            BandwidthMeasureTime=json_data.get("BandwidthMeasureTime"),
            Bfd=json_data.get("Bfd"),
            BfdDesiredMinTx=json_data.get("BfdDesiredMinTx"),
            BfdDetectMult=json_data.get("BfdDetectMult"),
            BfdRequiredMinRx=json_data.get("BfdRequiredMinRx"),
            BroadcastForticlientDiscovery=json_data.get("BroadcastForticlientDiscovery"),
            BroadcastForward=json_data.get("BroadcastForward"),
            CaptivePortal=json_data.get("CaptivePortal"),
            CliConnStatus=json_data.get("CliConnStatus"),
            Color=json_data.get("Color"),
            DedicatedTo=json_data.get("DedicatedTo"),
            Defaultgw=json_data.get("Defaultgw"),
            Description=json_data.get("Description"),
            DetectedPeerMtu=json_data.get("DetectedPeerMtu"),
            Detectprotocol=json_data.get("Detectprotocol"),
            Detectserver=json_data.get("Detectserver"),
            DeviceAccessList=json_data.get("DeviceAccessList"),
            DeviceIdentification=json_data.get("DeviceIdentification"),
            DeviceIdentificationActiveScan=json_data.get("DeviceIdentificationActiveScan"),
            DeviceNetscan=json_data.get("DeviceNetscan"),
            DeviceUserIdentification=json_data.get("DeviceUserIdentification"),
            Devindex=json_data.get("Devindex"),
            DhcpClientIdentifier=json_data.get("DhcpClientIdentifier"),
            DhcpRelayAgentOption=json_data.get("DhcpRelayAgentOption"),
            DhcpRelayInterface=json_data.get("DhcpRelayInterface"),
            DhcpRelayInterfaceSelectMethod=json_data.get("DhcpRelayInterfaceSelectMethod"),
            DhcpRelayIp=json_data.get("DhcpRelayIp"),
            DhcpRelayService=json_data.get("DhcpRelayService"),
            DhcpRelayType=json_data.get("DhcpRelayType"),
            DhcpRenewTime=json_data.get("DhcpRenewTime"),
            DiscRetryTimeout=json_data.get("DiscRetryTimeout"),
            DisconnectThreshold=json_data.get("DisconnectThreshold"),
            Distance=json_data.get("Distance"),
            DnsServerOverride=json_data.get("DnsServerOverride"),
            DropFragment=json_data.get("DropFragment"),
            DropOverlappedFragment=json_data.get("DropOverlappedFragment"),
            DynamicSortSubtable=json_data.get("DynamicSortSubtable"),
            EgressShapingProfile=json_data.get("EgressShapingProfile"),
            EndpointCompliance=json_data.get("EndpointCompliance"),
            EstimatedDownstreamBandwidth=json_data.get("EstimatedDownstreamBandwidth"),
            EstimatedUpstreamBandwidth=json_data.get("EstimatedUpstreamBandwidth"),
            ExplicitFtpProxy=json_data.get("ExplicitFtpProxy"),
            ExplicitWebProxy=json_data.get("ExplicitWebProxy"),
            External=json_data.get("External"),
            FailActionOnExtender=json_data.get("FailActionOnExtender"),
            FailAlertMethod=json_data.get("FailAlertMethod"),
            FailDetect=json_data.get("FailDetect"),
            FailDetectOption=json_data.get("FailDetectOption"),
            Fortiheartbeat=json_data.get("Fortiheartbeat"),
            Fortilink=json_data.get("Fortilink"),
            FortilinkBackupLink=json_data.get("FortilinkBackupLink"),
            FortilinkNeighborDetect=json_data.get("FortilinkNeighborDetect"),
            FortilinkSplitInterface=json_data.get("FortilinkSplitInterface"),
            FortilinkStacking=json_data.get("FortilinkStacking"),
            ForwardDomain=json_data.get("ForwardDomain"),
            Gwdetect=json_data.get("Gwdetect"),
            HaPriority=json_data.get("HaPriority"),
            IcmpAcceptRedirect=json_data.get("IcmpAcceptRedirect"),
            IcmpSendRedirect=json_data.get("IcmpSendRedirect"),
            Id=json_data.get("Id"),
            IdentAccept=json_data.get("IdentAccept"),
            IdleTimeout=json_data.get("IdleTimeout"),
            Inbandwidth=json_data.get("Inbandwidth"),
            IngressShapingProfile=json_data.get("IngressShapingProfile"),
            IngressSpilloverThreshold=json_data.get("IngressSpilloverThreshold"),
            Interface=json_data.get("Interface"),
            Internal=json_data.get("Internal"),
            Ip=json_data.get("Ip"),
            IpManagedByFortiipam=json_data.get("IpManagedByFortiipam"),
            Ipmac=json_data.get("Ipmac"),
            IpsSnifferMode=json_data.get("IpsSnifferMode"),
            Ipunnumbered=json_data.get("Ipunnumbered"),
            L2forward=json_data.get("L2forward"),
            LacpHaSlave=json_data.get("LacpHaSlave"),
            LacpMode=json_data.get("LacpMode"),
            LacpSpeed=json_data.get("LacpSpeed"),
            LcpEchoInterval=json_data.get("LcpEchoInterval"),
            LcpMaxEchoFails=json_data.get("LcpMaxEchoFails"),
            LinkUpDelay=json_data.get("LinkUpDelay"),
            LldpNetworkPolicy=json_data.get("LldpNetworkPolicy"),
            LldpReception=json_data.get("LldpReception"),
            LldpTransmission=json_data.get("LldpTransmission"),
            Macaddr=json_data.get("Macaddr"),
            ManagedSubnetworkSize=json_data.get("ManagedSubnetworkSize"),
            ManagementIp=json_data.get("ManagementIp"),
            MeasuredDownstreamBandwidth=json_data.get("MeasuredDownstreamBandwidth"),
            MeasuredUpstreamBandwidth=json_data.get("MeasuredUpstreamBandwidth"),
            MinLinks=json_data.get("MinLinks"),
            MinLinksDown=json_data.get("MinLinksDown"),
            Mode=json_data.get("Mode"),
            MonitorBandwidth=json_data.get("MonitorBandwidth"),
            Mtu=json_data.get("Mtu"),
            MtuOverride=json_data.get("MtuOverride"),
            Name=json_data.get("Name"),
            Ndiscforward=json_data.get("Ndiscforward"),
            NetbiosForward=json_data.get("NetbiosForward"),
            NetflowSampler=json_data.get("NetflowSampler"),
            Outbandwidth=json_data.get("Outbandwidth"),
            PadtRetryTimeout=json_data.get("PadtRetryTimeout"),
            Password=json_data.get("Password"),
            PingServStatus=json_data.get("PingServStatus"),
            PollingInterval=json_data.get("PollingInterval"),
            PppoeUnnumberedNegotiate=json_data.get("PppoeUnnumberedNegotiate"),
            PptpAuthType=json_data.get("PptpAuthType"),
            PptpClient=json_data.get("PptpClient"),
            PptpPassword=json_data.get("PptpPassword"),
            PptpServerIp=json_data.get("PptpServerIp"),
            PptpTimeout=json_data.get("PptpTimeout"),
            PptpUser=json_data.get("PptpUser"),
            PreserveSessionRoute=json_data.get("PreserveSessionRoute"),
            Priority=json_data.get("Priority"),
            PriorityOverride=json_data.get("PriorityOverride"),
            ProxyCaptivePortal=json_data.get("ProxyCaptivePortal"),
            RedundantInterface=json_data.get("RedundantInterface"),
            RemoteIp=json_data.get("RemoteIp"),
            ReplacemsgOverrideGroup=json_data.get("ReplacemsgOverrideGroup"),
            RingRx=json_data.get("RingRx"),
            RingTx=json_data.get("RingTx"),
            Role=json_data.get("Role"),
            SampleDirection=json_data.get("SampleDirection"),
            SampleRate=json_data.get("SampleRate"),
            ScanBotnetConnections=json_data.get("ScanBotnetConnections"),
            SecondaryIp=json_data.get("SecondaryIp"),
            SecurityExemptList=json_data.get("SecurityExemptList"),
            SecurityExternalLogout=json_data.get("SecurityExternalLogout"),
            SecurityExternalWeb=json_data.get("SecurityExternalWeb"),
            SecurityMacAuthBypass=json_data.get("SecurityMacAuthBypass"),
            SecurityMode=json_data.get("SecurityMode"),
            SecurityRedirectUrl=json_data.get("SecurityRedirectUrl"),
            ServiceName=json_data.get("ServiceName"),
            SflowSampler=json_data.get("SflowSampler"),
            SnmpIndex=json_data.get("SnmpIndex"),
            Speed=json_data.get("Speed"),
            SpilloverThreshold=json_data.get("SpilloverThreshold"),
            SrcCheck=json_data.get("SrcCheck"),
            Status=json_data.get("Status"),
            Stpforward=json_data.get("Stpforward"),
            StpforwardMode=json_data.get("StpforwardMode"),
            Subst=json_data.get("Subst"),
            SubstituteDstMac=json_data.get("SubstituteDstMac"),
            SwcFirstCreate=json_data.get("SwcFirstCreate"),
            SwcVlan=json_data.get("SwcVlan"),
            Switch=json_data.get("Switch"),
            SwitchControllerAccessVlan=json_data.get("SwitchControllerAccessVlan"),
            SwitchControllerArpInspection=json_data.get("SwitchControllerArpInspection"),
            SwitchControllerDhcpSnooping=json_data.get("SwitchControllerDhcpSnooping"),
            SwitchControllerDhcpSnoopingOption82=json_data.get("SwitchControllerDhcpSnoopingOption82"),
            SwitchControllerDhcpSnoopingVerifyMac=json_data.get("SwitchControllerDhcpSnoopingVerifyMac"),
            SwitchControllerFeature=json_data.get("SwitchControllerFeature"),
            SwitchControllerIgmpSnooping=json_data.get("SwitchControllerIgmpSnooping"),
            SwitchControllerIgmpSnoopingFastLeave=json_data.get("SwitchControllerIgmpSnoopingFastLeave"),
            SwitchControllerIgmpSnoopingProxy=json_data.get("SwitchControllerIgmpSnoopingProxy"),
            SwitchControllerIotScanning=json_data.get("SwitchControllerIotScanning"),
            SwitchControllerLearningLimit=json_data.get("SwitchControllerLearningLimit"),
            SwitchControllerMgmtVlan=json_data.get("SwitchControllerMgmtVlan"),
            SwitchControllerNac=json_data.get("SwitchControllerNac"),
            SwitchControllerRspanMode=json_data.get("SwitchControllerRspanMode"),
            SwitchControllerSourceIp=json_data.get("SwitchControllerSourceIp"),
            SwitchControllerTrafficPolicy=json_data.get("SwitchControllerTrafficPolicy"),
            TcpMss=json_data.get("TcpMss"),
            TrustIp61=json_data.get("TrustIp61"),
            TrustIp62=json_data.get("TrustIp62"),
            TrustIp63=json_data.get("TrustIp63"),
            TrustIp1=json_data.get("TrustIp1"),
            TrustIp2=json_data.get("TrustIp2"),
            TrustIp3=json_data.get("TrustIp3"),
            Type=json_data.get("Type"),
            Username=json_data.get("Username"),
            Vdom=json_data.get("Vdom"),
            Vdomparam=json_data.get("Vdomparam"),
            Vindex=json_data.get("Vindex"),
            VlanProtocol=json_data.get("VlanProtocol"),
            Vlanforward=json_data.get("Vlanforward"),
            Vlanid=json_data.get("Vlanid"),
            Vrf=json_data.get("Vrf"),
            VrrpVirtualMac=json_data.get("VrrpVirtualMac"),
            Wccp=json_data.get("Wccp"),
            Weight=json_data.get("Weight"),
            WinsIp=json_data.get("WinsIp"),
            ClientOptions=deserialize_list(json_data.get("ClientOptions"), ClientOptionsDefinition),
            FailAlertInterfaces=deserialize_list(json_data.get("FailAlertInterfaces"), FailAlertInterfacesDefinition),
            Ipv6=deserialize_list(json_data.get("Ipv6"), Ipv6Definition),
            ManagedDevice=deserialize_list(json_data.get("ManagedDevice"), ManagedDeviceDefinition),
            Member=deserialize_list(json_data.get("Member"), MemberDefinition),
            Secondaryip=deserialize_list(json_data.get("Secondaryip"), SecondaryipDefinition),
            SecurityGroups=deserialize_list(json_data.get("SecurityGroups"), SecurityGroupsDefinition),
            Tagging=deserialize_list(json_data.get("Tagging"), TaggingDefinition),
            Vrrp=deserialize_list(json_data.get("Vrrp"), VrrpDefinition),
        )


# work around possible type aliasing issues when variable has same name as a model
_ResourceModel = ResourceModel


@dataclass
class ClientOptionsDefinition(BaseModel):
    Code: Optional[float]
    Id: Optional[float]
    Ip: Optional[str]
    Type: Optional[str]
    Value: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_ClientOptionsDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_ClientOptionsDefinition"]:
        if not json_data:
            return None
        return cls(
            Code=json_data.get("Code"),
            Id=json_data.get("Id"),
            Ip=json_data.get("Ip"),
            Type=json_data.get("Type"),
            Value=json_data.get("Value"),
        )


# work around possible type aliasing issues when variable has same name as a model
_ClientOptionsDefinition = ClientOptionsDefinition


@dataclass
class FailAlertInterfacesDefinition(BaseModel):
    Name: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_FailAlertInterfacesDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_FailAlertInterfacesDefinition"]:
        if not json_data:
            return None
        return cls(
            Name=json_data.get("Name"),
        )


# work around possible type aliasing issues when variable has same name as a model
_FailAlertInterfacesDefinition = FailAlertInterfacesDefinition


@dataclass
class Ipv6Definition(BaseModel):
    Autoconf: Optional[str]
    CliConn6Status: Optional[float]
    Dhcp6ClientOptions: Optional[str]
    Dhcp6InformationRequest: Optional[str]
    Dhcp6PrefixDelegation: Optional[str]
    Dhcp6PrefixHint: Optional[str]
    Dhcp6PrefixHintPlt: Optional[float]
    Dhcp6PrefixHintVlt: Optional[float]
    Dhcp6RelayIp: Optional[str]
    Dhcp6RelayService: Optional[str]
    Dhcp6RelayType: Optional[str]
    Icmp6SendRedirect: Optional[str]
    InterfaceIdentifier: Optional[str]
    Ip6Address: Optional[str]
    Ip6Allowaccess: Optional[str]
    Ip6DefaultLife: Optional[float]
    Ip6DnsServerOverride: Optional[str]
    Ip6HopLimit: Optional[float]
    Ip6LinkMtu: Optional[float]
    Ip6ManageFlag: Optional[str]
    Ip6MaxInterval: Optional[float]
    Ip6MinInterval: Optional[float]
    Ip6Mode: Optional[str]
    Ip6OtherFlag: Optional[str]
    Ip6PrefixMode: Optional[str]
    Ip6ReachableTime: Optional[float]
    Ip6RetransTime: Optional[float]
    Ip6SendAdv: Optional[str]
    Ip6Subnet: Optional[str]
    Ip6UpstreamInterface: Optional[str]
    NdCert: Optional[str]
    NdCgaModifier: Optional[str]
    NdMode: Optional[str]
    NdSecurityLevel: Optional[float]
    NdTimestampDelta: Optional[float]
    NdTimestampFuzz: Optional[float]
    UniqueAutoconfAddr: Optional[str]
    Vrip6LinkLocal: Optional[str]
    VrrpVirtualMac6: Optional[str]
    Ip6DelegatedPrefixList: Optional[Sequence["_Ip6DelegatedPrefixListDefinition"]]
    Ip6ExtraAddr: Optional[Sequence["_Ip6ExtraAddrDefinition"]]
    Ip6PrefixList: Optional[Sequence["_Ip6PrefixListDefinition"]]
    Vrrp6: Optional[Sequence["_Vrrp6Definition"]]

    @classmethod
    def _deserialize(
        cls: Type["_Ipv6Definition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_Ipv6Definition"]:
        if not json_data:
            return None
        return cls(
            Autoconf=json_data.get("Autoconf"),
            CliConn6Status=json_data.get("CliConn6Status"),
            Dhcp6ClientOptions=json_data.get("Dhcp6ClientOptions"),
            Dhcp6InformationRequest=json_data.get("Dhcp6InformationRequest"),
            Dhcp6PrefixDelegation=json_data.get("Dhcp6PrefixDelegation"),
            Dhcp6PrefixHint=json_data.get("Dhcp6PrefixHint"),
            Dhcp6PrefixHintPlt=json_data.get("Dhcp6PrefixHintPlt"),
            Dhcp6PrefixHintVlt=json_data.get("Dhcp6PrefixHintVlt"),
            Dhcp6RelayIp=json_data.get("Dhcp6RelayIp"),
            Dhcp6RelayService=json_data.get("Dhcp6RelayService"),
            Dhcp6RelayType=json_data.get("Dhcp6RelayType"),
            Icmp6SendRedirect=json_data.get("Icmp6SendRedirect"),
            InterfaceIdentifier=json_data.get("InterfaceIdentifier"),
            Ip6Address=json_data.get("Ip6Address"),
            Ip6Allowaccess=json_data.get("Ip6Allowaccess"),
            Ip6DefaultLife=json_data.get("Ip6DefaultLife"),
            Ip6DnsServerOverride=json_data.get("Ip6DnsServerOverride"),
            Ip6HopLimit=json_data.get("Ip6HopLimit"),
            Ip6LinkMtu=json_data.get("Ip6LinkMtu"),
            Ip6ManageFlag=json_data.get("Ip6ManageFlag"),
            Ip6MaxInterval=json_data.get("Ip6MaxInterval"),
            Ip6MinInterval=json_data.get("Ip6MinInterval"),
            Ip6Mode=json_data.get("Ip6Mode"),
            Ip6OtherFlag=json_data.get("Ip6OtherFlag"),
            Ip6PrefixMode=json_data.get("Ip6PrefixMode"),
            Ip6ReachableTime=json_data.get("Ip6ReachableTime"),
            Ip6RetransTime=json_data.get("Ip6RetransTime"),
            Ip6SendAdv=json_data.get("Ip6SendAdv"),
            Ip6Subnet=json_data.get("Ip6Subnet"),
            Ip6UpstreamInterface=json_data.get("Ip6UpstreamInterface"),
            NdCert=json_data.get("NdCert"),
            NdCgaModifier=json_data.get("NdCgaModifier"),
            NdMode=json_data.get("NdMode"),
            NdSecurityLevel=json_data.get("NdSecurityLevel"),
            NdTimestampDelta=json_data.get("NdTimestampDelta"),
            NdTimestampFuzz=json_data.get("NdTimestampFuzz"),
            UniqueAutoconfAddr=json_data.get("UniqueAutoconfAddr"),
            Vrip6LinkLocal=json_data.get("Vrip6LinkLocal"),
            VrrpVirtualMac6=json_data.get("VrrpVirtualMac6"),
            Ip6DelegatedPrefixList=deserialize_list(json_data.get("Ip6DelegatedPrefixList"), Ip6DelegatedPrefixListDefinition),
            Ip6ExtraAddr=deserialize_list(json_data.get("Ip6ExtraAddr"), Ip6ExtraAddrDefinition),
            Ip6PrefixList=deserialize_list(json_data.get("Ip6PrefixList"), Ip6PrefixListDefinition),
            Vrrp6=deserialize_list(json_data.get("Vrrp6"), Vrrp6Definition),
        )


# work around possible type aliasing issues when variable has same name as a model
_Ipv6Definition = Ipv6Definition


@dataclass
class Ip6DelegatedPrefixListDefinition(BaseModel):
    AutonomousFlag: Optional[str]
    OnlinkFlag: Optional[str]
    PrefixId: Optional[float]
    Rdnss: Optional[str]
    RdnssService: Optional[str]
    Subnet: Optional[str]
    UpstreamInterface: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_Ip6DelegatedPrefixListDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_Ip6DelegatedPrefixListDefinition"]:
        if not json_data:
            return None
        return cls(
            AutonomousFlag=json_data.get("AutonomousFlag"),
            OnlinkFlag=json_data.get("OnlinkFlag"),
            PrefixId=json_data.get("PrefixId"),
            Rdnss=json_data.get("Rdnss"),
            RdnssService=json_data.get("RdnssService"),
            Subnet=json_data.get("Subnet"),
            UpstreamInterface=json_data.get("UpstreamInterface"),
        )


# work around possible type aliasing issues when variable has same name as a model
_Ip6DelegatedPrefixListDefinition = Ip6DelegatedPrefixListDefinition


@dataclass
class Ip6ExtraAddrDefinition(BaseModel):
    Prefix: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_Ip6ExtraAddrDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_Ip6ExtraAddrDefinition"]:
        if not json_data:
            return None
        return cls(
            Prefix=json_data.get("Prefix"),
        )


# work around possible type aliasing issues when variable has same name as a model
_Ip6ExtraAddrDefinition = Ip6ExtraAddrDefinition


@dataclass
class Ip6PrefixListDefinition(BaseModel):
    AutonomousFlag: Optional[str]
    OnlinkFlag: Optional[str]
    PreferredLifeTime: Optional[float]
    Prefix: Optional[str]
    Rdnss: Optional[str]
    ValidLifeTime: Optional[float]
    Dnssl: Optional[Sequence["_DnsslDefinition"]]

    @classmethod
    def _deserialize(
        cls: Type["_Ip6PrefixListDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_Ip6PrefixListDefinition"]:
        if not json_data:
            return None
        return cls(
            AutonomousFlag=json_data.get("AutonomousFlag"),
            OnlinkFlag=json_data.get("OnlinkFlag"),
            PreferredLifeTime=json_data.get("PreferredLifeTime"),
            Prefix=json_data.get("Prefix"),
            Rdnss=json_data.get("Rdnss"),
            ValidLifeTime=json_data.get("ValidLifeTime"),
            Dnssl=deserialize_list(json_data.get("Dnssl"), DnsslDefinition),
        )


# work around possible type aliasing issues when variable has same name as a model
_Ip6PrefixListDefinition = Ip6PrefixListDefinition


@dataclass
class DnsslDefinition(BaseModel):
    Domain: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_DnsslDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_DnsslDefinition"]:
        if not json_data:
            return None
        return cls(
            Domain=json_data.get("Domain"),
        )


# work around possible type aliasing issues when variable has same name as a model
_DnsslDefinition = DnsslDefinition


@dataclass
class Vrrp6Definition(BaseModel):
    AcceptMode: Optional[str]
    AdvInterval: Optional[float]
    Preempt: Optional[str]
    Priority: Optional[float]
    StartTime: Optional[float]
    Status: Optional[str]
    Vrdst6: Optional[str]
    Vrgrp: Optional[float]
    Vrid: Optional[float]
    Vrip6: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_Vrrp6Definition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_Vrrp6Definition"]:
        if not json_data:
            return None
        return cls(
            AcceptMode=json_data.get("AcceptMode"),
            AdvInterval=json_data.get("AdvInterval"),
            Preempt=json_data.get("Preempt"),
            Priority=json_data.get("Priority"),
            StartTime=json_data.get("StartTime"),
            Status=json_data.get("Status"),
            Vrdst6=json_data.get("Vrdst6"),
            Vrgrp=json_data.get("Vrgrp"),
            Vrid=json_data.get("Vrid"),
            Vrip6=json_data.get("Vrip6"),
        )


# work around possible type aliasing issues when variable has same name as a model
_Vrrp6Definition = Vrrp6Definition


@dataclass
class ManagedDeviceDefinition(BaseModel):
    Name: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_ManagedDeviceDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_ManagedDeviceDefinition"]:
        if not json_data:
            return None
        return cls(
            Name=json_data.get("Name"),
        )


# work around possible type aliasing issues when variable has same name as a model
_ManagedDeviceDefinition = ManagedDeviceDefinition


@dataclass
class MemberDefinition(BaseModel):
    InterfaceName: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_MemberDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_MemberDefinition"]:
        if not json_data:
            return None
        return cls(
            InterfaceName=json_data.get("InterfaceName"),
        )


# work around possible type aliasing issues when variable has same name as a model
_MemberDefinition = MemberDefinition


@dataclass
class SecondaryipDefinition(BaseModel):
    Allowaccess: Optional[str]
    Detectprotocol: Optional[str]
    Detectserver: Optional[str]
    Gwdetect: Optional[str]
    HaPriority: Optional[float]
    Id: Optional[float]
    Ip: Optional[str]
    PingServStatus: Optional[float]

    @classmethod
    def _deserialize(
        cls: Type["_SecondaryipDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_SecondaryipDefinition"]:
        if not json_data:
            return None
        return cls(
            Allowaccess=json_data.get("Allowaccess"),
            Detectprotocol=json_data.get("Detectprotocol"),
            Detectserver=json_data.get("Detectserver"),
            Gwdetect=json_data.get("Gwdetect"),
            HaPriority=json_data.get("HaPriority"),
            Id=json_data.get("Id"),
            Ip=json_data.get("Ip"),
            PingServStatus=json_data.get("PingServStatus"),
        )


# work around possible type aliasing issues when variable has same name as a model
_SecondaryipDefinition = SecondaryipDefinition


@dataclass
class SecurityGroupsDefinition(BaseModel):
    Name: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_SecurityGroupsDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_SecurityGroupsDefinition"]:
        if not json_data:
            return None
        return cls(
            Name=json_data.get("Name"),
        )


# work around possible type aliasing issues when variable has same name as a model
_SecurityGroupsDefinition = SecurityGroupsDefinition


@dataclass
class TaggingDefinition(BaseModel):
    Category: Optional[str]
    Name: Optional[str]
    Tags: Optional[Sequence["_TagsDefinition"]]

    @classmethod
    def _deserialize(
        cls: Type["_TaggingDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_TaggingDefinition"]:
        if not json_data:
            return None
        return cls(
            Category=json_data.get("Category"),
            Name=json_data.get("Name"),
            Tags=deserialize_list(json_data.get("Tags"), TagsDefinition),
        )


# work around possible type aliasing issues when variable has same name as a model
_TaggingDefinition = TaggingDefinition


@dataclass
class TagsDefinition(BaseModel):
    Name: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_TagsDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_TagsDefinition"]:
        if not json_data:
            return None
        return cls(
            Name=json_data.get("Name"),
        )


# work around possible type aliasing issues when variable has same name as a model
_TagsDefinition = TagsDefinition


@dataclass
class VrrpDefinition(BaseModel):
    AcceptMode: Optional[str]
    AdvInterval: Optional[float]
    IgnoreDefaultRoute: Optional[str]
    Preempt: Optional[str]
    Priority: Optional[float]
    StartTime: Optional[float]
    Status: Optional[str]
    Version: Optional[str]
    Vrdst: Optional[str]
    VrdstPriority: Optional[float]
    Vrgrp: Optional[float]
    Vrid: Optional[float]
    Vrip: Optional[str]
    ProxyArp: Optional[Sequence["_ProxyArpDefinition"]]

    @classmethod
    def _deserialize(
        cls: Type["_VrrpDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_VrrpDefinition"]:
        if not json_data:
            return None
        return cls(
            AcceptMode=json_data.get("AcceptMode"),
            AdvInterval=json_data.get("AdvInterval"),
            IgnoreDefaultRoute=json_data.get("IgnoreDefaultRoute"),
            Preempt=json_data.get("Preempt"),
            Priority=json_data.get("Priority"),
            StartTime=json_data.get("StartTime"),
            Status=json_data.get("Status"),
            Version=json_data.get("Version"),
            Vrdst=json_data.get("Vrdst"),
            VrdstPriority=json_data.get("VrdstPriority"),
            Vrgrp=json_data.get("Vrgrp"),
            Vrid=json_data.get("Vrid"),
            Vrip=json_data.get("Vrip"),
            ProxyArp=deserialize_list(json_data.get("ProxyArp"), ProxyArpDefinition),
        )


# work around possible type aliasing issues when variable has same name as a model
_VrrpDefinition = VrrpDefinition


@dataclass
class ProxyArpDefinition(BaseModel):
    Id: Optional[float]
    Ip: Optional[str]

    @classmethod
    def _deserialize(
        cls: Type["_ProxyArpDefinition"],
        json_data: Optional[Mapping[str, Any]],
    ) -> Optional["_ProxyArpDefinition"]:
        if not json_data:
            return None
        return cls(
            Id=json_data.get("Id"),
            Ip=json_data.get("Ip"),
        )


# work around possible type aliasing issues when variable has same name as a model
_ProxyArpDefinition = ProxyArpDefinition


