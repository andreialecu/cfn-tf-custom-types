{
    "typeName": "TF::FortiOS::SystemFssopolling",
    "description": "Configure Fortinet Single Sign On (FSSO) server.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/fortios/TF-FortiOS-SystemFssopolling/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AuthPassword": {
            "type": "string",
            "description": "Password to connect to FSSO Agent."
        },
        "Authentication": {
            "type": "string",
            "description": "Enable/disable FSSO Agent Authentication. Valid values: `enable`, `disable`."
        },
        "Id": {
            "type": "string"
        },
        "ListeningPort": {
            "type": "number",
            "description": "Listening port to accept clients (1 - 65535)."
        },
        "Status": {
            "type": "string",
            "description": "Enable/disable FSSO Polling Mode. Valid values: `enable`, `disable`."
        },
        "Vdomparam": {
            "type": "string",
            "description": "Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter."
        }
    },
    "additionalProperties": false,
    "required": [],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/properties/AuthPassword"
    ]
}