{
    "typeName": "TF::FortiOS::AuthenticationScheme",
    "description": "Configure Authentication Schemes.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/fortios/TF-FortiOS-AuthenticationScheme/docs/README.md",
    "definitions": {
        "UserDatabaseDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Name": {
                    "type": "string",
                    "description": "Authentication server name."
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "DomainController": {
            "type": "string",
            "description": "Domain controller setting."
        },
        "DynamicSortSubtable": {
            "type": "string",
            "description": "true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables."
        },
        "FssoAgentForNtlm": {
            "type": "string",
            "description": "FSSO agent to use for NTLM authentication."
        },
        "FssoGuest": {
            "type": "string",
            "description": "Enable/disable user fsso-guest authentication (default = disable). Valid values: `enable`, `disable`."
        },
        "Id": {
            "type": "string"
        },
        "KerberosKeytab": {
            "type": "string",
            "description": "Kerberos keytab setting."
        },
        "Method": {
            "type": "string",
            "description": "Authentication methods (default = basic). Valid values: `ntlm`, `basic`, `digest`, `form`, `negotiate`, `fsso`, `rsso`, `ssh-publickey`."
        },
        "Name": {
            "type": "string",
            "description": "Authentication scheme name."
        },
        "NegotiateNtlm": {
            "type": "string",
            "description": "Enable/disable negotiate authentication for NTLM (default = disable). Valid values: `enable`, `disable`."
        },
        "RequireTfa": {
            "type": "string",
            "description": "Enable/disable two-factor authentication (default = disable). Valid values: `enable`, `disable`."
        },
        "SshCa": {
            "type": "string",
            "description": "SSH CA name."
        },
        "Vdomparam": {
            "type": "string",
            "description": "Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter."
        },
        "UserDatabase": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/UserDatabaseDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "Method"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}