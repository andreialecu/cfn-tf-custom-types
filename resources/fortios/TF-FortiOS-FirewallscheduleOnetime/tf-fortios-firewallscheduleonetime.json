{
    "typeName": "TF::FortiOS::FirewallscheduleOnetime",
    "description": "Onetime schedule configuration.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/fortios/TF-FortiOS-FirewallscheduleOnetime/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Color": {
            "type": "number",
            "description": "Color of icon on the GUI."
        },
        "End": {
            "type": "string",
            "description": "Schedule end date and time, format hh:mm yyyy/mm/dd."
        },
        "ExpirationDays": {
            "type": "number",
            "description": "Write an event log message this many days before the schedule expires."
        },
        "Id": {
            "type": "string"
        },
        "Name": {
            "type": "string",
            "description": "Onetime schedule name."
        },
        "Start": {
            "type": "string",
            "description": "Schedule start date and time, format hh:mm yyyy/mm/dd."
        },
        "Vdomparam": {
            "type": "string",
            "description": "Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter."
        }
    },
    "additionalProperties": false,
    "required": [
        "End",
        "Name",
        "Start"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}