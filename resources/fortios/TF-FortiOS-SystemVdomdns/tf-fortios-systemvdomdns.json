{
    "typeName": "TF::FortiOS::SystemVdomdns",
    "description": "Configure DNS servers for a non-management VDOM.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/fortios/TF-FortiOS-SystemVdomdns/docs/README.md",
    "definitions": {
        "ServerHostnameDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Hostname": {
                    "type": "string",
                    "description": "DNS server host name list separated by space (maximum 4 domains)."
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "DnsOverTls": {
            "type": "string",
            "description": "Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`."
        },
        "DynamicSortSubtable": {
            "type": "string",
            "description": "true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables."
        },
        "Id": {
            "type": "string"
        },
        "Interface": {
            "type": "string",
            "description": "Specify outgoing interface to reach server."
        },
        "InterfaceSelectMethod": {
            "type": "string",
            "description": "Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`."
        },
        "Ip6Primary": {
            "type": "string",
            "description": "Primary IPv6 DNS server IP address for the VDOM."
        },
        "Ip6Secondary": {
            "type": "string",
            "description": "Secondary IPv6 DNS server IP address for the VDOM."
        },
        "Primary": {
            "type": "string",
            "description": "Primary DNS server IP address for the VDOM."
        },
        "Secondary": {
            "type": "string",
            "description": "Secondary DNS server IP address for the VDOM."
        },
        "SourceIp": {
            "type": "string",
            "description": "Source IP for communications with the DNS server."
        },
        "SslCertificate": {
            "type": "string",
            "description": "Name of local certificate for SSL connections."
        },
        "VdomDns": {
            "type": "string",
            "description": "Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`."
        },
        "Vdomparam": {
            "type": "string",
            "description": "Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter."
        },
        "ServerHostname": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/ServerHostnameDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}