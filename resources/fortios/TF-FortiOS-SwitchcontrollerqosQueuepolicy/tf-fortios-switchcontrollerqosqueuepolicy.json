{
    "typeName": "TF::FortiOS::SwitchcontrollerqosQueuepolicy",
    "description": "Configure FortiSwitch QoS egress queue policy.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/fortios/TF-FortiOS-SwitchcontrollerqosQueuepolicy/docs/README.md",
    "definitions": {
        "CosQueueDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Description": {
                    "type": "string",
                    "description": "Description of the COS queue."
                },
                "DropPolicy": {
                    "type": "string",
                    "description": "COS queue drop policy. Valid values: `taildrop`, `weighted-random-early-detection`."
                },
                "Ecn": {
                    "type": "string",
                    "description": "Enable/disable ECN packet marking to drop eligible packets. Valid values: `disable`, `enable`."
                },
                "MaxRate": {
                    "type": "number",
                    "description": "Maximum rate (0 - 4294967295 kbps, 0 to disable)."
                },
                "MaxRatePercent": {
                    "type": "number",
                    "description": "Maximum rate (% of link speed)."
                },
                "MinRate": {
                    "type": "number",
                    "description": "Minimum rate (0 - 4294967295 kbps, 0 to disable)."
                },
                "MinRatePercent": {
                    "type": "number",
                    "description": "Minimum rate (% of link speed)."
                },
                "Name": {
                    "type": "string",
                    "description": "Cos queue ID."
                },
                "Weight": {
                    "type": "number",
                    "description": "Weight of weighted round robin scheduling."
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "DynamicSortSubtable": {
            "type": "string",
            "description": "true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables."
        },
        "Id": {
            "type": "string"
        },
        "Name": {
            "type": "string",
            "description": "QoS policy name."
        },
        "RateBy": {
            "type": "string",
            "description": "COS queue rate by kbps or percent. Valid values: `kbps`, `percent`."
        },
        "Schedule": {
            "type": "string",
            "description": "COS queue scheduling. Valid values: `strict`, `round-robin`, `weighted`."
        },
        "Vdomparam": {
            "type": "string",
            "description": "Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter."
        },
        "CosQueue": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/CosQueueDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "Name",
        "RateBy",
        "Schedule"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}