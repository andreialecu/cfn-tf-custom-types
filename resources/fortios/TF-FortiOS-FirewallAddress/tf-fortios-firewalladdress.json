{
    "typeName": "TF::FortiOS::FirewallAddress",
    "description": "Configure IPv4 addresses.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/fortios/TF-FortiOS-FirewallAddress/docs/README.md",
    "definitions": {
        "FssoGroupDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Name": {
                    "type": "string",
                    "description": "FSSO group name."
                }
            },
            "required": []
        },
        "ListDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Ip": {
                    "type": "string",
                    "description": "IP."
                }
            },
            "required": []
        },
        "TaggingDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Category": {
                    "type": "string",
                    "description": "Tag category."
                },
                "Name": {
                    "type": "string",
                    "description": "Tagging entry name."
                },
                "Tags": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/TagsDefinition"
                    }
                }
            },
            "required": []
        },
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Name": {
                    "type": "string",
                    "description": "Tag name."
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AllowRouting": {
            "type": "string",
            "description": "Enable/disable use of this address in the static route configuration. Valid values: `enable`, `disable`."
        },
        "AssociatedInterface": {
            "type": "string",
            "description": "Network interface associated with address."
        },
        "CacheTtl": {
            "type": "number",
            "description": "Defines the minimal TTL of individual IP addresses in FQDN cache measured in seconds."
        },
        "ClearpassSpt": {
            "type": "string",
            "description": "SPT (System Posture Token) value. Valid values: `unknown`, `healthy`, `quarantine`, `checkup`, `transient`, `infected`."
        },
        "Color": {
            "type": "number",
            "description": "Color of icon on the GUI."
        },
        "Comment": {
            "type": "string",
            "description": "Comment."
        },
        "Country": {
            "type": "string",
            "description": "IP addresses associated to a specific country."
        },
        "DynamicSortSubtable": {
            "type": "string",
            "description": "true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables."
        },
        "EndIp": {
            "type": "string",
            "description": "Final IP address (inclusive) in the range for the address."
        },
        "EndMac": {
            "type": "string",
            "description": "Last MAC address in the range."
        },
        "EpgName": {
            "type": "string",
            "description": "Endpoint group name."
        },
        "Filter": {
            "type": "string",
            "description": "Match criteria filter."
        },
        "Fqdn": {
            "type": "string",
            "description": "Fully Qualified Domain Name address."
        },
        "Id": {
            "type": "string"
        },
        "Interface": {
            "type": "string",
            "description": "Name of interface whose IP address is to be used."
        },
        "Name": {
            "type": "string",
            "description": "Address name."
        },
        "NodeIpOnly": {
            "type": "string",
            "description": "Enable/disable collection of node addresses only in Kubernetes. Valid values: `enable`, `disable`."
        },
        "ObjId": {
            "type": "string",
            "description": "Object ID for NSX."
        },
        "ObjTag": {
            "type": "string",
            "description": "Tag of dynamic address object."
        },
        "ObjType": {
            "type": "string",
            "description": "Object type. Valid values: `ip`, `mac`."
        },
        "Organization": {
            "type": "string",
            "description": "Organization domain name (Syntax: organization/domain)."
        },
        "PolicyGroup": {
            "type": "string",
            "description": "Policy group name."
        },
        "Sdn": {
            "type": "string",
            "description": "SDN."
        },
        "SdnAddrType": {
            "type": "string",
            "description": "Type of addresses to collect. Valid values: `private`, `public`, `all`."
        },
        "SdnTag": {
            "type": "string",
            "description": "SDN Tag."
        },
        "StartIp": {
            "type": "string",
            "description": "First IP address (inclusive) in the range for the address."
        },
        "StartMac": {
            "type": "string",
            "description": "First MAC address in the range."
        },
        "SubType": {
            "type": "string",
            "description": "Sub-type of address."
        },
        "Subnet": {
            "type": "string",
            "description": "IP address and subnet mask of address."
        },
        "SubnetName": {
            "type": "string",
            "description": "Subnet name."
        },
        "Tenant": {
            "type": "string",
            "description": "Tenant."
        },
        "Type": {
            "type": "string",
            "description": "Type of address."
        },
        "Uuid": {
            "type": "string",
            "description": "Universally Unique Identifier (UUID; automatically assigned but can be manually reset)."
        },
        "Vdomparam": {
            "type": "string",
            "description": "Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter."
        },
        "Visibility": {
            "type": "string",
            "description": "Enable/disable address visibility in the GUI. Valid values: `enable`, `disable`."
        },
        "Wildcard": {
            "type": "string",
            "description": "IP address and wildcard netmask."
        },
        "WildcardFqdn": {
            "type": "string",
            "description": "Fully Qualified Domain Name with wildcard characters."
        },
        "FssoGroup": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/FssoGroupDefinition"
            }
        },
        "List": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/ListDefinition"
            }
        },
        "Tagging": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/TaggingDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}