{
    "typeName": "TF::Alicloud::EssScalinggroupVserverGroups",
    "description": "Attaches/Detaches vserver groups to a specified scaling group.\n\n-> **NOTE:** The load balancer of which vserver groups belongs to must be in `active` status.\n\n-> **NOTE:** If scaling group's network type is `VPC`, the vserver groups must be in the same `VPC`.\n \n-> **NOTE:** A scaling group can have at most 5 vserver groups attached by default.\n\n-> **NOTE:** Vserver groups and the default group of loadbalancer share the same backend server quota.\n\n-> **NOTE:** When attach vserver groups to scaling group, existing ECS instances will be added to vserver groups; Instead, ECS instances will be removed from vserver group when detach.\n\n-> **NOTE:** Detach action will be executed before attach action.\n\n-> **NOTE:** Vserver group is defined uniquely by `loadbalancer_id`, `vserver_group_id`, `port`.\n\n-> **NOTE:** Modifing `weight` attribute means detach vserver group first and then, attach with new weight parameter.\n\n-> **NOTE:** Resource `alicloud_ess_scalinggroup_vserver_groups` is available in 1.53.0+.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/alicloud/TF-Alicloud-EssScalinggroupVserverGroups/docs/README.md",
    "definitions": {
        "VserverGroupsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "LoadbalancerId": {
                    "type": "string"
                },
                "VserverAttributes": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "$ref": "#/definitions/VserverAttributesDefinition"
                    },
                    "minItems": 1
                }
            },
            "required": [
                "LoadbalancerId"
            ]
        },
        "VserverAttributesDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Port": {
                    "type": "number"
                },
                "VserverGroupId": {
                    "type": "string"
                },
                "Weight": {
                    "type": "number"
                }
            },
            "required": [
                "Port",
                "VserverGroupId",
                "Weight"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Force": {
            "type": "boolean",
            "description": "If instances of scaling group are attached/removed from slb backend server when attach/detach vserver group from scaling group. Default to true."
        },
        "Id": {
            "type": "string"
        },
        "ScalingGroupId": {
            "type": "string",
            "description": "ID of the scaling group."
        },
        "VserverGroups": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/VserverGroupsDefinition"
            },
            "minItems": 1
        }
    },
    "additionalProperties": false,
    "required": [
        "ScalingGroupId"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}