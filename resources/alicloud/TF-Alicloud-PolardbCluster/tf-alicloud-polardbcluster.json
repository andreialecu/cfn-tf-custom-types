{
    "typeName": "TF::Alicloud::PolardbCluster",
    "description": "Provides a PolarDB cluster resource. A PolarDB cluster is an isolated database\nenvironment in the cloud. A PolarDB cluster can contain multiple user-created\ndatabases.\n\n-> **NOTE:** Available in v1.66.0+.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/alicloud/TF-Alicloud-PolardbCluster/docs/README.md",
    "definitions": {
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "ParametersDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Name": {
                    "type": "string"
                },
                "Value": {
                    "type": "string"
                }
            },
            "required": [
                "Name",
                "Value"
            ]
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AutoRenewPeriod": {
            "type": "number",
            "description": "Auto-renewal period of an cluster, in the unit of the month. It is valid when pay_type is `PrePaid`. Valid value:1, 2, 3, 6, 12, 24, 36, Default to 1."
        },
        "CollectorStatus": {
            "type": "string"
        },
        "ConnectionString": {
            "type": "string"
        },
        "DbNodeClass": {
            "type": "string",
            "description": "The db_node_class of cluster node."
        },
        "DbNodeCount": {
            "type": "number"
        },
        "DbType": {
            "type": "string",
            "description": "Database type. Value options: MySQL, Oracle, PostgreSQL."
        },
        "DbVersion": {
            "type": "string",
            "description": "Database version. Value options can refer to the latest docs [CreateDBCluster](https://help.aliyun.com/document_detail/98169.html) `DBVersion`."
        },
        "Description": {
            "type": "string",
            "description": "The description of cluster."
        },
        "Id": {
            "type": "string"
        },
        "MaintainTime": {
            "type": "string",
            "description": "Maintainable time period format of the instance: HH:MMZ-HH:MMZ (UTC time)."
        },
        "ModifyType": {
            "type": "string",
            "description": "Use as `db_node_class` change class , define upgrade or downgrade.  Valid values are `Upgrade`, `Downgrade`, Default to `Upgrade`."
        },
        "PayType": {
            "type": "string",
            "description": "Valid values are `PrePaid`, `PostPaid`, Default to `PostPaid`. Currently, the resource can not supports change pay type."
        },
        "Period": {
            "type": "number",
            "description": "The duration that you will buy DB cluster (in month). It is valid when pay_type is `PrePaid`. Valid values: [1~9], 12, 24, 36. Default to 1."
        },
        "RenewalStatus": {
            "type": "string",
            "description": "Valid values are `AutoRenewal`, `Normal`, `NotRenewal`, Default to `NotRenewal`."
        },
        "ResourceGroupId": {
            "type": "string"
        },
        "SecurityIps": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "List of IP addresses allowed to access all databases of an cluster. The list contains up to 1,000 IP addresses, separated by commas. Supported formats include 0.0.0.0/0, 10.23.12.24 (IP), and 10.23.12.24/24 (Classless Inter-Domain Routing (CIDR) mode. /24 represents the length of the prefix in an IP address. The range of the prefix length is [1,32])."
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "A mapping of tags to assign to the resource.\n- Key: It can be up to 64 characters in length. It cannot begin with \"aliyun\", \"acs:\", \"http://\", or \"https://\". It cannot be a null string.\n- Value: It can be up to 128 characters in length. It cannot begin with \"aliyun\", \"acs:\", \"http://\", or \"https://\". It can be a null string."
        },
        "TdeStatus": {
            "type": "string"
        },
        "VswitchId": {
            "type": "string",
            "description": "The virtual switch ID to launch DB instances in one VPC."
        },
        "ZoneId": {
            "type": "string",
            "description": "The Zone to launch the DB cluster. it supports multiple zone."
        },
        "Parameters": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/ParametersDefinition"
            }
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [
        "DbNodeClass",
        "DbType",
        "DbVersion"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/ConnectionString",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}