{
    "typeName": "TF::VCD::NsxtNetworkImported",
    "description": "Provides a VMware Cloud Director Org VDC NSX-T Imported Network type. This can be used to create, modify, and delete NSX-T VDC networks of Imported type (backed by NSX-T).\n\nSupported in provider *v3.2+* for NSX-T VDCs only.\n\n-> This is **not Terraform imported** resource, but a special **Imported** type of **Org VDC network** in NSX-T VDC. Read more about Imported Network in [official VCD documentation]((https://docs.vmware.com/en/VMware-Cloud-Director/10.2/VMware-Cloud-Director-Tenant-Portal-Guide/GUID-FB303D62-67EA-4209-BE4D-C3746481BCC8.html).",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/vcd/TF-VCD-NsxtNetworkImported/docs/README.md",
    "definitions": {
        "StaticIpPoolDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "EndAddress": {
                    "type": "string"
                },
                "StartAddress": {
                    "type": "string"
                }
            },
            "required": [
                "EndAddress",
                "StartAddress"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Description": {
            "type": "string",
            "description": "An optional description of the network."
        },
        "Dns1": {
            "type": "string",
            "description": "First DNS server to use."
        },
        "Dns2": {
            "type": "string",
            "description": "Second DNS server to use."
        },
        "DnsSuffix": {
            "type": "string",
            "description": "A FQDN for the virtual machines on this network."
        },
        "Gateway": {
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "Name": {
            "type": "string",
            "description": "A unique name for the network."
        },
        "NsxtLogicalSwitchId": {
            "type": "string"
        },
        "NsxtLogicalSwitchName": {
            "type": "string",
            "description": "Unique name of an existing NSX-T segment.\n**Note** it will never be refreshed because API does not allow reading this name after it is\nconsumed. Instead ID will be stored in `nsxt_logical_switch_id` attribute."
        },
        "Org": {
            "type": "string",
            "description": "The name of organization to use, optional if defined at provider level. Useful when\nconnected as sysadmin working across different organisations."
        },
        "PrefixLength": {
            "type": "number",
            "description": "The prefix length for the new network (e.g. 24 for netmask 255.255.255.0)."
        },
        "Vdc": {
            "type": "string",
            "description": "The name of VDC to use, optional if defined at provider level."
        },
        "StaticIpPool": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/StaticIpPoolDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "Gateway",
        "Name",
        "NsxtLogicalSwitchName",
        "PrefixLength"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/NsxtLogicalSwitchId"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}