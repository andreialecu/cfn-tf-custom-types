{
    "typeName": "TF::OCI::SchServiceConnector",
    "description": "This resource provides the Service Connector resource in Oracle Cloud Infrastructure Service Connector Hub service.\n\nCreates a new service connector in the specified compartment.\nA service connector is a logically defined flow for moving data from\na source service to a destination service in Oracle Cloud Infrastructure.\nFor general information about service connectors, see\n[Service Connector Hub Overview](https://docs.cloud.oracle.com/iaas/Content/service-connector-hub/overview.htm).\n\nFor purposes of access control, you must provide the\n[OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where\nyou want the service connector to reside. Notice that the service connector\ndoesn't have to be in the same compartment as the source or target services.\nFor information about access control and compartments, see\n[Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).\n\nAfter you send your request, the new service conn...",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/oci/TF-OCI-SchServiceConnector/docs/README.md",
    "definitions": {
        "DefinedTagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "FreeformTagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "SystemTagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "SourceDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Kind": {
                    "type": "string"
                },
                "StreamId": {
                    "type": "string"
                },
                "Cursor": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/CursorDefinition"
                    },
                    "maxItems": 1
                },
                "LogSources": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/LogSourcesDefinition"
                    }
                }
            },
            "required": [
                "Kind"
            ]
        },
        "TargetDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "BatchRolloverSizeInMbs": {
                    "type": "number"
                },
                "BatchRolloverTimeInMs": {
                    "type": "number"
                },
                "Bucket": {
                    "type": "string"
                },
                "CompartmentId": {
                    "type": "string"
                },
                "EnableFormattedMessaging": {
                    "type": "boolean"
                },
                "FunctionId": {
                    "type": "string"
                },
                "Kind": {
                    "type": "string"
                },
                "LogGroupId": {
                    "type": "string"
                },
                "Metric": {
                    "type": "string"
                },
                "MetricNamespace": {
                    "type": "string"
                },
                "Namespace": {
                    "type": "string"
                },
                "ObjectNamePrefix": {
                    "type": "string"
                },
                "StreamId": {
                    "type": "string"
                },
                "TopicId": {
                    "type": "string"
                }
            },
            "required": [
                "Kind"
            ]
        },
        "TasksDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "BatchSizeInKbs": {
                    "type": "number"
                },
                "BatchTimeInSec": {
                    "type": "number"
                },
                "Condition": {
                    "type": "string"
                },
                "FunctionId": {
                    "type": "string"
                },
                "Kind": {
                    "type": "string"
                }
            },
            "required": [
                "Kind"
            ]
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        },
        "CursorDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Kind": {
                    "type": "string"
                }
            },
            "required": []
        },
        "LogSourcesDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "CompartmentId": {
                    "type": "string"
                },
                "LogGroupId": {
                    "type": "string"
                },
                "LogId": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "CompartmentId": {
            "type": "string",
            "description": "(Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric.\n* `enable_formatted_messaging` - (Applicable when kind=notifications) (Updatable) Whether to apply a simplified, user-friendly format to the message. Applies only when friendly formatting is supported by the service connector source and the subscription protocol.  Example: `true`\n* `function_id` - (Required when kind=functions) (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the function.\n* `kind` - (Required) (Updatable) The type descriminator.\n* `log_group_id` - (Required when kind=loggingAnalytics) (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Logging Analytics log group.\n* `metric` - (Required when kind=monitoring) (Updatable) The name of the metric.  Example: `CpuUtilization`\n* `metric_namespace` - (Required when kind=monitoring) (Updatable) The namespace of the metric.  Example: `oci_computeagent`\n* `namespace` - (Applicable when kind=objectStorage) (Updatable) The namespace.\n* `object_name_prefix` - (Applicable when kind=objectStorage) (Updatable) The prefix of the objects. Avoid entering confidential information.\n* `stream_id` - (Required when kind=streaming) (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream.\n* `topic_id` - (Required when kind=notifications) (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the topic."
        },
        "DefinedTags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/DefinedTagsDefinition"
            },
            "description": "(Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{\"foo-namespace.bar-key\": \"value\"}`."
        },
        "Description": {
            "type": "string",
            "description": "(Updatable) The description of the resource. Avoid entering confidential information."
        },
        "DisplayName": {
            "type": "string",
            "description": "(Updatable) A user-friendly name. It does not have to be unique, and it is changeable. Avoid entering confidential information."
        },
        "FreeformTags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/FreeformTagsDefinition"
            },
            "description": "(Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{\"bar-key\": \"value\"}`."
        },
        "Id": {
            "type": "string"
        },
        "LifecyleDetails": {
            "type": "string"
        },
        "State": {
            "type": "string",
            "description": "(Updatable) The target state for the service connector. Could be set to `ACTIVE` or `INACTIVE`."
        },
        "SystemTags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/SystemTagsDefinition"
            }
        },
        "TimeCreated": {
            "type": "string"
        },
        "TimeUpdated": {
            "type": "string"
        },
        "Source": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/SourceDefinition"
            },
            "maxItems": 1,
            "minItems": 1
        },
        "Target": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/TargetDefinition"
            },
            "maxItems": 1,
            "minItems": 1
        },
        "Tasks": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/TasksDefinition"
            }
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [
        "CompartmentId",
        "DisplayName"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/LifecyleDetails",
        "/properties/SystemTags",
        "/properties/TimeCreated",
        "/properties/TimeUpdated"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}