{
    "typeName": "TF::OCI::KmsVerify",
    "description": "This resource provides the Verify resource in Oracle Cloud Infrastructure Kms service.\n\nVerifies a digital signature that was generated by the [Sign](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/SignedData/Sign) operation \nby using the public key of the same asymmetric key that was used to sign the data. If you want to validate the  \ndigital signature outside of the service, you can do so by using the public key of the asymmetric key.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/oci/TF-OCI-KmsVerify/docs/README.md",
    "definitions": {
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "CryptoEndpoint": {
            "type": "string",
            "description": "The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,', 'GenerateDataEncryptionKey', 'Sign' and 'Verify' operations. see Vault Crypto endpoint."
        },
        "Id": {
            "type": "string"
        },
        "IsSignatureValid": {
            "type": "boolean"
        },
        "KeyId": {
            "type": "string",
            "description": "The OCID of the key used to sign the message."
        },
        "KeyVersionId": {
            "type": "string",
            "description": "The OCID of the key version used to sign the message."
        },
        "Message": {
            "type": "string",
            "description": "The base64-encoded binary data object denoting the message or message digest to sign. You can have a message up to 4096 bytes in size. To sign a larger message, provide the message digest."
        },
        "MessageType": {
            "type": "string",
            "description": "Denotes whether the value of the message parameter is a raw message or a message digest.  The default value, `RAW`, indicates a message. To indicate a message digest, use `DIGEST`."
        },
        "Signature": {
            "type": "string",
            "description": "The base64-encoded binary data object denoting the cryptographic signature generated for the message."
        },
        "SigningAlgorithm": {
            "type": "string",
            "description": "The algorithm to use to sign the message or message digest. For RSA keys, supported signature schemes include PKCS #1 and RSASSA-PSS, along with  different hashing algorithms.  For ECDSA keys, ECDSA is the supported signature scheme with different hashing algorithms. When you pass a message digest for signing, ensure that you specify the same hashing algorithm  as used when creating the message digest."
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [
        "CryptoEndpoint",
        "KeyId",
        "KeyVersionId",
        "Message",
        "Signature",
        "SigningAlgorithm"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/IsSignatureValid"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}