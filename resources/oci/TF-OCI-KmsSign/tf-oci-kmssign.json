{
    "typeName": "TF::OCI::KmsSign",
    "description": "This resource provides the Sign resource in Oracle Cloud Infrastructure Kms service.\n\nCreates a digital signature for a message or message digest by using the private key of a public-private key pair, \nalso known as an asymmetric key. To verify the generated signature, you can use the [Verify](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/VerifiedData/Verify) \noperation. Or, if you want to validate the signature outside of the service, you can do so by using the public key of the same asymmetric key.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/oci/TF-OCI-KmsSign/docs/README.md",
    "definitions": {
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "CryptoEndpoint": {
            "type": "string",
            "description": "The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,', 'GenerateDataEncryptionKey', 'Sign' and 'Verify' operations. see Vault Crypto endpoint."
        },
        "Id": {
            "type": "string"
        },
        "KeyId": {
            "type": "string",
            "description": "The OCID of the key used to sign the message."
        },
        "KeyVersionId": {
            "type": "string",
            "description": "The OCID of the key version used to sign the message."
        },
        "Message": {
            "type": "string",
            "description": "The base64-encoded binary data object denoting the message or message digest to sign. You can have a message up to 4096 bytes in size. To sign a larger message, provide the message digest."
        },
        "MessageType": {
            "type": "string",
            "description": "Denotes whether the value of the message parameter is a raw message or a message digest.  The default value, `RAW`, indicates a message. To indicate a message digest, use `DIGEST`."
        },
        "Signature": {
            "type": "string"
        },
        "SigningAlgorithm": {
            "type": "string",
            "description": "The algorithm to use to sign the message or message digest. For RSA keys, supported signature schemes include PKCS #1 and RSASSA-PSS, along with  different hashing algorithms.  For ECDSA keys, ECDSA is the supported signature scheme with different hashing algorithms. When you pass a message digest for signing, ensure that you specify the same hashing algorithm  as used when creating the message digest."
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [
        "CryptoEndpoint",
        "KeyId",
        "Message",
        "SigningAlgorithm"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/Signature"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}