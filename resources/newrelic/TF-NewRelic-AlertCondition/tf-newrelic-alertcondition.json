{
    "typeName": "TF::NewRelic::AlertCondition",
    "description": "Use this resource to create and manage alert conditions for APM, Browser, and Mobile in New Relic.\n\n-> **NOTE:** The [newrelic_nrql_alert_condition](nrql_alert_condition.html) resource is preferred for configuring alerts conditions. In most cases feature parity can be achieved with a NRQL query. Other condition types may be deprecated in the future and receive fewer product updates.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/newrelic/TF-NewRelic-AlertCondition/docs/README.md",
    "definitions": {
        "TermDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Duration": {
                    "type": "number"
                },
                "Operator": {
                    "type": "string"
                },
                "Priority": {
                    "type": "string"
                },
                "Threshold": {
                    "type": "number"
                },
                "TimeFunction": {
                    "type": "string"
                }
            },
            "required": [
                "Duration",
                "Threshold",
                "TimeFunction"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "ConditionScope": {
            "type": "string",
            "description": "`application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n* `enabled` - (Optional) Whether the condition is enabled or not. Defaults to true.\n* `gc_metric` - (Optional) A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n* `violation_close_timer` - (Optional) Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n* `runbook_url` - (Optional) Runbook URL to display in notifications.\n* `term` - (Required) A list of terms for this condition. See [Terms](#terms) below for details.\n* `user_defined_metric` - (Optional) A custom metric to be evaluated.\n* `user_defined_value_function` - (Optional) One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "Enabled": {
            "type": "boolean",
            "description": "Whether the condition is enabled or not. Defaults to true.\n* `gc_metric` - (Optional) A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n* `violation_close_timer` - (Optional) Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n* `runbook_url` - (Optional) Runbook URL to display in notifications.\n* `term` - (Required) A list of terms for this condition. See [Terms](#terms) below for details.\n* `user_defined_metric` - (Optional) A custom metric to be evaluated.\n* `user_defined_value_function` - (Optional) One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "Entities": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "number"
            },
            "description": "The instance IDs associated with this condition.\n* `metric` - (Required) The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_jvm_metric`\n* `cpu_utilization_time`\n* `deadlocked_threads`\n* `gc_cpu_time`\n* `heap_memory_usage`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n* `condition_scope` - (Required for some types) `application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n* `enabled` - (Optional) Whether the condition is enabled or not. Defaults to true.\n* `gc_metric` - (Optional) A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n* `violation_close_timer` - (Optional) Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n* `runbook_url` - (Optional) Runbook URL to display in notifications.\n* `term` - (Required) A list of terms for this condition. See [Terms](#terms) below for details.\n* `user_defined_metric` - (Optional) A custom metric to be evaluated.\n* `user_defined_value_function` - (Optional) One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "GcMetric": {
            "type": "string",
            "description": "A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n* `violation_close_timer` - (Optional) Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n* `runbook_url` - (Optional) Runbook URL to display in notifications.\n* `term` - (Required) A list of terms for this condition. See [Terms](#terms) below for details.\n* `user_defined_metric` - (Optional) A custom metric to be evaluated.\n* `user_defined_value_function` - (Optional) One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "Id": {
            "type": "string"
        },
        "Metric": {
            "type": "string",
            "description": "The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_jvm_metric`\n* `cpu_utilization_time`\n* `deadlocked_threads`\n* `gc_cpu_time`\n* `heap_memory_usage`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n* `condition_scope` - (Required for some types) `application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n* `enabled` - (Optional) Whether the condition is enabled or not. Defaults to true.\n* `gc_metric` - (Optional) A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n* `violation_close_timer` - (Optional) Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n* `runbook_url` - (Optional) Runbook URL to display in notifications.\n* `term` - (Required) A list of terms for this condition. See [Terms](#terms) below for details.\n* `user_defined_metric` - (Optional) A custom metric to be evaluated.\n* `user_defined_value_function` - (Optional) One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "Name": {
            "type": "string",
            "description": "The title of the condition. Must be between 1 and 64 characters, inclusive.\n* `type` - (Required) The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n* `entities` - (Required) The instance IDs associated with this condition.\n* `metric` - (Required) The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_jvm_metric`\n* `cpu_utilization_time`\n* `deadlocked_threads`\n* `gc_cpu_time`\n* `heap_memory_usage`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n* `condition_scope` - (Required for some types) `application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n* `enabled` - (Optional) Whether the condition is enabled or not. Defaults to true.\n* `gc_metric` - (Optional) A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n* `violation_close_timer` - (Optional) Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n* `runbook_url` - (Optional) Runbook URL to display in notifications.\n* `term` - (Required) A list of terms for this condition. See [Terms](#terms) below for details.\n* `user_defined_metric` - (Optional) A custom metric to be evaluated.\n* `user_defined_value_function` - (Optional) One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "PolicyId": {
            "type": "number",
            "description": "The ID of the policy where this condition should be used.\n* `name` - (Required) The title of the condition. Must be between 1 and 64 characters, inclusive.\n* `type` - (Required) The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n* `entities` - (Required) The instance IDs associated with this condition.\n* `metric` - (Required) The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_jvm_metric`\n* `cpu_utilization_time`\n* `deadlocked_threads`\n* `gc_cpu_time`\n* `heap_memory_usage`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n* `condition_scope` - (Required for some types) `application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n* `enabled` - (Optional) Whether the condition is enabled or not. Defaults to true.\n* `gc_metric` - (Optional) A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n* `violation_close_timer` - (Optional) Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n* `runbook_url` - (Optional) Runbook URL to display in notifications.\n* `term` - (Required) A list of terms for this condition. See [Terms](#terms) below for details.\n* `user_defined_metric` - (Optional) A custom metric to be evaluated.\n* `user_defined_value_function` - (Optional) One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "RunbookUrl": {
            "type": "string",
            "description": "Runbook URL to display in notifications.\n* `term` - (Required) A list of terms for this condition. See [Terms](#terms) below for details.\n* `user_defined_metric` - (Optional) A custom metric to be evaluated.\n* `user_defined_value_function` - (Optional) One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "Type": {
            "type": "string",
            "description": "The type of condition. One of: `apm_app_metric`, `apm_jvm_metric`, `apm_kt_metric`, `browser_metric`, `mobile_metric`\n* `entities` - (Required) The instance IDs associated with this condition.\n* `metric` - (Required) The metric field accepts parameters based on the `type` set. One of these metrics based on `type`:\n* `apm_app_metric`\n* `apdex`\n* `error_percentage`\n* `response_time_background`\n* `response_time_web`\n* `throughput_background`\n* `throughput_web`\n* `user_defined`\n* `apm_jvm_metric`\n* `cpu_utilization_time`\n* `deadlocked_threads`\n* `gc_cpu_time`\n* `heap_memory_usage`\n* `apm_kt_metric`\n* `apdex`\n* `error_count`\n* `error_percentage`\n* `response_time`\n* `throughput`\n* `browser_metric`\n* `ajax_response_time`\n* `ajax_throughput`\n* `dom_processing`\n* `end_user_apdex`\n* `network`\n* `page_rendering`\n* `page_view_throughput`\n* `page_views_with_js_errors`\n* `request_queuing`\n* `total_page_load`\n* `user_defined`\n* `web_application`\n* `mobile_metric`\n* `database`\n* `images`\n* `json`\n* `mobile_crash_rate`\n* `network_error_percentage`\n* `network`\n* `status_error_percentage`\n* `user_defined`\n* `view_loading`\n* `condition_scope` - (Required for some types) `application` or `instance`.  Choose `application` for most scenarios.  If you are using the JVM plugin in New Relic, the `instance` setting allows your condition to trigger [for specific app instances](https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/scope-alert-thresholds-specific-instances).\n* `enabled` - (Optional) Whether the condition is enabled or not. Defaults to true.\n* `gc_metric` - (Optional) A valid Garbage Collection metric e.g. `GC/G1 Young Generation`.\n* `violation_close_timer` - (Optional) Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n* `runbook_url` - (Optional) Runbook URL to display in notifications.\n* `term` - (Required) A list of terms for this condition. See [Terms](#terms) below for details.\n* `user_defined_metric` - (Optional) A custom metric to be evaluated.\n* `user_defined_value_function` - (Optional) One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "UserDefinedMetric": {
            "type": "string",
            "description": "A custom metric to be evaluated.\n* `user_defined_value_function` - (Optional) One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "UserDefinedValueFunction": {
            "type": "string",
            "description": "One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "ViolationCloseTimer": {
            "type": "number",
            "description": "Automatically close instance-based violations, including JVM health metric violations, after the number of hours specified. Must be: `1`, `2`, `4`, `8`, `12` or `24`.\n* `runbook_url` - (Optional) Runbook URL to display in notifications.\n* `term` - (Required) A list of terms for this condition. See [Terms](#terms) below for details.\n* `user_defined_metric` - (Optional) A custom metric to be evaluated.\n* `user_defined_value_function` - (Optional) One of: `average`, `min`, `max`, `total`, or `sample_size`."
        },
        "Term": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TermDefinition"
            },
            "minItems": 1
        }
    },
    "additionalProperties": false,
    "required": [
        "Entities",
        "Metric",
        "Name",
        "PolicyId",
        "Type"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}