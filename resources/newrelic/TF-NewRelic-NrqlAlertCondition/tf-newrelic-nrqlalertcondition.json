{
    "typeName": "TF::NewRelic::NrqlAlertCondition",
    "description": "Use this resource to create and manage NRQL alert conditions in New Relic.\n\n-> **IMPORTANT!** Version 2.0.0 of the New Relic Terraform Provider introduces some [additional requirements](/docs/providers/newrelic/index.html) for configuring the provider.\n<br><br>\nBefore upgrading to version 2.0.0 or later, it is recommended to upgrade to the most recent 1.x version of the provider and ensure that your environment successfully runs `terraform plan` without unexpected changes.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/newrelic/TF-NewRelic-NrqlAlertCondition/docs/README.md",
    "definitions": {
        "CriticalDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Duration": {
                    "type": "number"
                },
                "Operator": {
                    "type": "string"
                },
                "Threshold": {
                    "type": "number"
                },
                "ThresholdDuration": {
                    "type": "number"
                },
                "ThresholdOccurrences": {
                    "type": "string"
                },
                "TimeFunction": {
                    "type": "string"
                }
            },
            "required": [
                "Threshold"
            ]
        },
        "NrqlDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "EvaluationOffset": {
                    "type": "number"
                },
                "Query": {
                    "type": "string"
                },
                "SinceValue": {
                    "type": "string"
                }
            },
            "required": [
                "Query"
            ]
        },
        "TermDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Duration": {
                    "type": "number"
                },
                "Operator": {
                    "type": "string"
                },
                "Priority": {
                    "type": "string"
                },
                "Threshold": {
                    "type": "number"
                },
                "ThresholdDuration": {
                    "type": "number"
                },
                "ThresholdOccurrences": {
                    "type": "string"
                },
                "TimeFunction": {
                    "type": "string"
                }
            },
            "required": [
                "Threshold"
            ]
        },
        "WarningDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Duration": {
                    "type": "number"
                },
                "Operator": {
                    "type": "string"
                },
                "Threshold": {
                    "type": "number"
                },
                "ThresholdDuration": {
                    "type": "number"
                },
                "ThresholdOccurrences": {
                    "type": "string"
                },
                "TimeFunction": {
                    "type": "string"
                }
            },
            "required": [
                "Threshold"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AccountId": {
            "type": "number",
            "description": "The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable `NEW_RELIC_ACCOUNT_ID`.\n- `baseline_direction` - (Optional) The baseline direction of a _baseline_ NRQL alert condition. Valid values are: `lower_only`, `upper_and_lower`, `upper_only` (case insensitive).\n- `description` - (Optional) The description of the NRQL alert condition.\n- `policy_id` - (Required) The ID of the policy where this condition should be used.\n- `name` - (Required) The title of the condition.\n- `type` - (Optional) The type of the condition. Valid values are `static`, `baseline`, or `outlier`. Defaults to `static`.\n- `runbook_url` - (Optional) Runbook URL to display in notifications.\n- `enabled` - (Optional) Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n- `nrql` - (Required) A NRQL query. See [NRQL](#nrql) below for details.\n- `term` - (Optional) **DEPRECATED** Use `critical`, and `warning` instead.  A list of terms for this condition. See [Terms](#terms) below for details.\n- `critical` - (Required) A list containing the `critical` threshold values. See [Terms](#terms) below for details.\n- `warning` - (Optional) A list containing the `warning` threshold values. See [Terms](#terms) below for details.\n- `value_function` - (Required if `type` is `static`, optional when `type` is `baseline` or `outlier` ) Possible values are `single_value`, `sum` (case insensitive).\n- `expected_groups` - (Optional) Number of expected groups when using `outlier` detection.\n- `open_violation_on_group_overlap` - (Optional) Whether or not to trigger a violation when groups overlap. Set to `true` if you want to trigger a violation when groups overlap. This argument is only applicable in `outlier` conditions.\n- `ignore_overlap` - (Optional) **DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "AggregationWindow": {
            "type": "number",
            "description": "The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 15 minutes (900 seconds). Default is 60 seconds.\n- `expiration_duration` - (Optional) The amount of time (in seconds) to wait before considering the signal expired.\n- `open_violation_on_expiration` - (Optional) Whether to create a new violation to capture that the signal expired.\n- `close_violations_on_expiration` - (Optional) Whether to close all open violations when the signal expires."
        },
        "BaselineDirection": {
            "type": "string",
            "description": "The baseline direction of a _baseline_ NRQL alert condition. Valid values are: `lower_only`, `upper_and_lower`, `upper_only` (case insensitive).\n- `description` - (Optional) The description of the NRQL alert condition.\n- `policy_id` - (Required) The ID of the policy where this condition should be used.\n- `name` - (Required) The title of the condition.\n- `type` - (Optional) The type of the condition. Valid values are `static`, `baseline`, or `outlier`. Defaults to `static`.\n- `runbook_url` - (Optional) Runbook URL to display in notifications.\n- `enabled` - (Optional) Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n- `nrql` - (Required) A NRQL query. See [NRQL](#nrql) below for details.\n- `term` - (Optional) **DEPRECATED** Use `critical`, and `warning` instead.  A list of terms for this condition. See [Terms](#terms) below for details.\n- `critical` - (Required) A list containing the `critical` threshold values. See [Terms](#terms) below for details.\n- `warning` - (Optional) A list containing the `warning` threshold values. See [Terms](#terms) below for details.\n- `value_function` - (Required if `type` is `static`, optional when `type` is `baseline` or `outlier` ) Possible values are `single_value`, `sum` (case insensitive).\n- `expected_groups` - (Optional) Number of expected groups when using `outlier` detection.\n- `open_violation_on_group_overlap` - (Optional) Whether or not to trigger a violation when groups overlap. Set to `true` if you want to trigger a violation when groups overlap. This argument is only applicable in `outlier` conditions.\n- `ignore_overlap` - (Optional) **DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "CloseViolationsOnExpiration": {
            "type": "boolean",
            "description": "Whether to close all open violations when the signal expires."
        },
        "Description": {
            "type": "string",
            "description": "The description of the NRQL alert condition.\n- `policy_id` - (Required) The ID of the policy where this condition should be used.\n- `name` - (Required) The title of the condition.\n- `type` - (Optional) The type of the condition. Valid values are `static`, `baseline`, or `outlier`. Defaults to `static`.\n- `runbook_url` - (Optional) Runbook URL to display in notifications.\n- `enabled` - (Optional) Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n- `nrql` - (Required) A NRQL query. See [NRQL](#nrql) below for details.\n- `term` - (Optional) **DEPRECATED** Use `critical`, and `warning` instead.  A list of terms for this condition. See [Terms](#terms) below for details.\n- `critical` - (Required) A list containing the `critical` threshold values. See [Terms](#terms) below for details.\n- `warning` - (Optional) A list containing the `warning` threshold values. See [Terms](#terms) below for details.\n- `value_function` - (Required if `type` is `static`, optional when `type` is `baseline` or `outlier` ) Possible values are `single_value`, `sum` (case insensitive).\n- `expected_groups` - (Optional) Number of expected groups when using `outlier` detection.\n- `open_violation_on_group_overlap` - (Optional) Whether or not to trigger a violation when groups overlap. Set to `true` if you want to trigger a violation when groups overlap. This argument is only applicable in `outlier` conditions.\n- `ignore_overlap` - (Optional) **DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "Enabled": {
            "type": "boolean",
            "description": "Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n- `nrql` - (Required) A NRQL query. See [NRQL](#nrql) below for details.\n- `term` - (Optional) **DEPRECATED** Use `critical`, and `warning` instead.  A list of terms for this condition. See [Terms](#terms) below for details.\n- `critical` - (Required) A list containing the `critical` threshold values. See [Terms](#terms) below for details.\n- `warning` - (Optional) A list containing the `warning` threshold values. See [Terms](#terms) below for details.\n- `value_function` - (Required if `type` is `static`, optional when `type` is `baseline` or `outlier` ) Possible values are `single_value`, `sum` (case insensitive).\n- `expected_groups` - (Optional) Number of expected groups when using `outlier` detection.\n- `open_violation_on_group_overlap` - (Optional) Whether or not to trigger a violation when groups overlap. Set to `true` if you want to trigger a violation when groups overlap. This argument is only applicable in `outlier` conditions.\n- `ignore_overlap` - (Optional) **DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "ExpectedGroups": {
            "type": "number",
            "description": "Number of expected groups when using `outlier` detection.\n- `open_violation_on_group_overlap` - (Optional) Whether or not to trigger a violation when groups overlap. Set to `true` if you want to trigger a violation when groups overlap. This argument is only applicable in `outlier` conditions.\n- `ignore_overlap` - (Optional) **DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "ExpirationDuration": {
            "type": "number",
            "description": "The amount of time (in seconds) to wait before considering the signal expired.\n- `open_violation_on_expiration` - (Optional) Whether to create a new violation to capture that the signal expired.\n- `close_violations_on_expiration` - (Optional) Whether to close all open violations when the signal expires."
        },
        "FillOption": {
            "type": "string",
            "description": "Which strategy to use when filling gaps in the signal. Possible values are `none`, `last_value` or `static`. If `static`, the `fill_value` field will be used for filling gaps in the signal.\n- `fill_value` - (Optional, required when `fill_option` is `static`) This value will be used for filling gaps in the signal.\n- `aggregation_window` - (Optional) The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 15 minutes (900 seconds). Default is 60 seconds.\n- `expiration_duration` - (Optional) The amount of time (in seconds) to wait before considering the signal expired.\n- `open_violation_on_expiration` - (Optional) Whether to create a new violation to capture that the signal expired.\n- `close_violations_on_expiration` - (Optional) Whether to close all open violations when the signal expires."
        },
        "FillValue": {
            "type": "number",
            "description": "This value will be used for filling gaps in the signal.\n- `aggregation_window` - (Optional) The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 15 minutes (900 seconds). Default is 60 seconds.\n- `expiration_duration` - (Optional) The amount of time (in seconds) to wait before considering the signal expired.\n- `open_violation_on_expiration` - (Optional) Whether to create a new violation to capture that the signal expired.\n- `close_violations_on_expiration` - (Optional) Whether to close all open violations when the signal expires."
        },
        "Id": {
            "type": "string"
        },
        "IgnoreOverlap": {
            "type": "boolean",
            "description": "**DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "Name": {
            "type": "string",
            "description": "The title of the condition.\n- `type` - (Optional) The type of the condition. Valid values are `static`, `baseline`, or `outlier`. Defaults to `static`.\n- `runbook_url` - (Optional) Runbook URL to display in notifications.\n- `enabled` - (Optional) Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n- `nrql` - (Required) A NRQL query. See [NRQL](#nrql) below for details.\n- `term` - (Optional) **DEPRECATED** Use `critical`, and `warning` instead.  A list of terms for this condition. See [Terms](#terms) below for details.\n- `critical` - (Required) A list containing the `critical` threshold values. See [Terms](#terms) below for details.\n- `warning` - (Optional) A list containing the `warning` threshold values. See [Terms](#terms) below for details.\n- `value_function` - (Required if `type` is `static`, optional when `type` is `baseline` or `outlier` ) Possible values are `single_value`, `sum` (case insensitive).\n- `expected_groups` - (Optional) Number of expected groups when using `outlier` detection.\n- `open_violation_on_group_overlap` - (Optional) Whether or not to trigger a violation when groups overlap. Set to `true` if you want to trigger a violation when groups overlap. This argument is only applicable in `outlier` conditions.\n- `ignore_overlap` - (Optional) **DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "OpenViolationOnExpiration": {
            "type": "boolean",
            "description": "Whether to create a new violation to capture that the signal expired.\n- `close_violations_on_expiration` - (Optional) Whether to close all open violations when the signal expires."
        },
        "OpenViolationOnGroupOverlap": {
            "type": "boolean",
            "description": "Whether or not to trigger a violation when groups overlap. Set to `true` if you want to trigger a violation when groups overlap. This argument is only applicable in `outlier` conditions.\n- `ignore_overlap` - (Optional) **DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "PolicyId": {
            "type": "number",
            "description": "The ID of the policy where this condition should be used.\n- `name` - (Required) The title of the condition.\n- `type` - (Optional) The type of the condition. Valid values are `static`, `baseline`, or `outlier`. Defaults to `static`.\n- `runbook_url` - (Optional) Runbook URL to display in notifications.\n- `enabled` - (Optional) Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n- `nrql` - (Required) A NRQL query. See [NRQL](#nrql) below for details.\n- `term` - (Optional) **DEPRECATED** Use `critical`, and `warning` instead.  A list of terms for this condition. See [Terms](#terms) below for details.\n- `critical` - (Required) A list containing the `critical` threshold values. See [Terms](#terms) below for details.\n- `warning` - (Optional) A list containing the `warning` threshold values. See [Terms](#terms) below for details.\n- `value_function` - (Required if `type` is `static`, optional when `type` is `baseline` or `outlier` ) Possible values are `single_value`, `sum` (case insensitive).\n- `expected_groups` - (Optional) Number of expected groups when using `outlier` detection.\n- `open_violation_on_group_overlap` - (Optional) Whether or not to trigger a violation when groups overlap. Set to `true` if you want to trigger a violation when groups overlap. This argument is only applicable in `outlier` conditions.\n- `ignore_overlap` - (Optional) **DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "RunbookUrl": {
            "type": "string",
            "description": "Runbook URL to display in notifications.\n- `enabled` - (Optional) Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n- `nrql` - (Required) A NRQL query. See [NRQL](#nrql) below for details.\n- `term` - (Optional) **DEPRECATED** Use `critical`, and `warning` instead.  A list of terms for this condition. See [Terms](#terms) below for details.\n- `critical` - (Required) A list containing the `critical` threshold values. See [Terms](#terms) below for details.\n- `warning` - (Optional) A list containing the `warning` threshold values. See [Terms](#terms) below for details.\n- `value_function` - (Required if `type` is `static`, optional when `type` is `baseline` or `outlier` ) Possible values are `single_value`, `sum` (case insensitive).\n- `expected_groups` - (Optional) Number of expected groups when using `outlier` detection.\n- `open_violation_on_group_overlap` - (Optional) Whether or not to trigger a violation when groups overlap. Set to `true` if you want to trigger a violation when groups overlap. This argument is only applicable in `outlier` conditions.\n- `ignore_overlap` - (Optional) **DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "Type": {
            "type": "string",
            "description": "The type of the condition. Valid values are `static`, `baseline`, or `outlier`. Defaults to `static`.\n- `runbook_url` - (Optional) Runbook URL to display in notifications.\n- `enabled` - (Optional) Whether to enable the alert condition. Valid values are `true` and `false`. Defaults to `true`.\n- `nrql` - (Required) A NRQL query. See [NRQL](#nrql) below for details.\n- `term` - (Optional) **DEPRECATED** Use `critical`, and `warning` instead.  A list of terms for this condition. See [Terms](#terms) below for details.\n- `critical` - (Required) A list containing the `critical` threshold values. See [Terms](#terms) below for details.\n- `warning` - (Optional) A list containing the `warning` threshold values. See [Terms](#terms) below for details.\n- `value_function` - (Required if `type` is `static`, optional when `type` is `baseline` or `outlier` ) Possible values are `single_value`, `sum` (case insensitive).\n- `expected_groups` - (Optional) Number of expected groups when using `outlier` detection.\n- `open_violation_on_group_overlap` - (Optional) Whether or not to trigger a violation when groups overlap. Set to `true` if you want to trigger a violation when groups overlap. This argument is only applicable in `outlier` conditions.\n- `ignore_overlap` - (Optional) **DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "ValueFunction": {
            "type": "string",
            "description": "Possible values are `single_value`, `sum` (case insensitive).\n- `expected_groups` - (Optional) Number of expected groups when using `outlier` detection.\n- `open_violation_on_group_overlap` - (Optional) Whether or not to trigger a violation when groups overlap. Set to `true` if you want to trigger a violation when groups overlap. This argument is only applicable in `outlier` conditions.\n- `ignore_overlap` - (Optional) **DEPRECATED:** Use `open_violation_on_group_overlap` instead, but use the inverse value of your boolean - e.g. if `ignore_overlap = false`, use `open_violation_on_group_overlap = true`. This argument sets whether to trigger a violation when groups overlap. If set to `true` overlapping groups will not trigger a violation. This argument is only applicable in `outlier` conditions.\n- `violation_time_limit` - (Optional) **DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "ViolationTimeLimit": {
            "type": "string",
            "description": "**DEPRECATED:** Use `violation_time_limit_seconds` instead. Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you select. Possible values are `ONE_HOUR`, `TWO_HOURS`, `FOUR_HOURS`, `EIGHT_HOURS`, `TWELVE_HOURS`, `TWENTY_FOUR_HOURS`, `THIRTY_DAYS` (case insensitive).<br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "ViolationTimeLimitSeconds": {
            "type": "number",
            "description": "Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive). <br>\n<small>\\***Note**: One of `violation_time_limit` _or_ `violation_time_limit_seconds` must be set, but not both.</small>."
        },
        "Critical": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/CriticalDefinition"
            },
            "maxItems": 1
        },
        "Nrql": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/NrqlDefinition"
            },
            "maxItems": 1,
            "minItems": 1
        },
        "Term": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TermDefinition"
            },
            "maxItems": 2
        },
        "Warning": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/WarningDefinition"
            },
            "maxItems": 1
        }
    },
    "additionalProperties": false,
    "required": [
        "Name",
        "PolicyId"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}