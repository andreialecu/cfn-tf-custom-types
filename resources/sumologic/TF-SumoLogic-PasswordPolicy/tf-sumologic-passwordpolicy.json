{
    "typeName": "TF::SumoLogic::PasswordPolicy",
    "description": "Sets the [Sumologic Password Policy][1]. Since there is only a single password policy for an organization,\nplease ensure that only a single instance of such resource is defined.\nThe behavior for defining more than one password policy resources is undefined.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/sumologic/TF-SumoLogic-PasswordPolicy/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AccountLockoutDurationInMins": {
            "type": "number"
        },
        "AccountLockoutThreshold": {
            "type": "number"
        },
        "FailedLoginResetDurationInMins": {
            "type": "number"
        },
        "Id": {
            "type": "string"
        },
        "MaxLength": {
            "type": "number"
        },
        "MaxPasswordAgeInDays": {
            "type": "number"
        },
        "MinLength": {
            "type": "number"
        },
        "MinUniquePasswords": {
            "type": "number"
        },
        "MustContainDigits": {
            "type": "boolean"
        },
        "MustContainLowercase": {
            "type": "boolean"
        },
        "MustContainSpecialChars": {
            "type": "boolean"
        },
        "MustContainUppercase": {
            "type": "boolean"
        },
        "RememberMfa": {
            "type": "boolean"
        },
        "RequireMfa": {
            "type": "boolean"
        }
    },
    "additionalProperties": false,
    "required": [],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}