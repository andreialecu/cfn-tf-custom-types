{
    "typeName": "TF::AzureAD::ApplicationOauth2PermissionScope",
    "description": "Manages an OAuth 2.0 Permission Scope associated with an application.\n\n-> **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/azuread/TF-AzureAD-ApplicationOauth2PermissionScope/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AdminConsentDescription": {
            "type": "string",
            "description": "Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users."
        },
        "AdminConsentDisplayName": {
            "type": "string",
            "description": "Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users."
        },
        "ApplicationObjectId": {
            "type": "string",
            "description": "The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created."
        },
        "Enabled": {
            "type": "boolean",
            "description": "Determines if the permission scope is enabled. Defaults to `true`."
        },
        "Id": {
            "type": "string"
        },
        "IsEnabled": {
            "type": "boolean"
        },
        "PermissionId": {
            "type": "string"
        },
        "ScopeId": {
            "type": "string",
            "description": "Specifies a custom UUID for the permission scope. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created."
        },
        "Type": {
            "type": "string",
            "description": "Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Defaults to `User`. Possible values are `User` or `Admin`."
        },
        "UserConsentDescription": {
            "type": "string",
            "description": "Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf."
        },
        "UserConsentDisplayName": {
            "type": "string",
            "description": "Display name for the delegated permission that appears in the end user consent experience."
        },
        "Value": {
            "type": "string",
            "description": "The value that is used for the `scp` claim in OAuth 2.0 access tokens."
        }
    },
    "additionalProperties": false,
    "required": [
        "AdminConsentDescription",
        "AdminConsentDisplayName",
        "ApplicationObjectId",
        "Type",
        "UserConsentDescription",
        "UserConsentDisplayName",
        "Value"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}