{
    "typeName": "TF::Vault::GcpSecretRoleset",
    "description": "Creates a Roleset in the [GCP Secrets Engine](https://www.vaultproject.io/docs/secrets/gcp/index.html) for Vault.\n\nEach Roleset is [tied](https://www.vaultproject.io/docs/secrets/gcp/index.html#service-accounts-are-tied-to-rolesets) to a Service Account, and can have one or more [bindings](https://www.vaultproject.io/docs/secrets/gcp/index.html#roleset-bindings) associated with it.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/vault/TF-Vault-GcpSecretRoleset/docs/README.md",
    "definitions": {
        "BindingDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Resource": {
                    "type": "string",
                    "description": "Resource or resource path for which IAM policy information will be bound. The resource path may be specified in a few different [formats](https://www.vaultproject.io/docs/secrets/gcp/index.html#roleset-bindings)."
                },
                "Roles": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "List of [GCP IAM roles](https://cloud.google.com/iam/docs/understanding-roles) for the resource."
                }
            },
            "required": [
                "Resource",
                "Roles"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Backend": {
            "type": "string",
            "description": "Path where the GCP Secrets Engine is mounted."
        },
        "Id": {
            "type": "string"
        },
        "Project": {
            "type": "string",
            "description": "Name of the GCP project that this roleset's service account will belong to."
        },
        "Roleset": {
            "type": "string",
            "description": "Name of the Roleset to create."
        },
        "SecretType": {
            "type": "string",
            "description": "Type of secret generated for this role set. Accepted values: `access_token`, `service_account_key`. Defaults to `access_token`."
        },
        "ServiceAccountEmail": {
            "type": "string"
        },
        "TokenScopes": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "List of OAuth scopes to assign to `access_token` secrets generated under this role set (`access_token` role sets only)."
        },
        "Binding": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/BindingDefinition"
            },
            "minItems": 1
        }
    },
    "additionalProperties": false,
    "required": [
        "Backend",
        "Project",
        "Roleset"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/ServiceAccountEmail"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}