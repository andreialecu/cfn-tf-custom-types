{
    "typeName": "TF::Vault::GenericSecret",
    "description": "Writes and manages secrets stored in\n[Vault's \"generic\" secret backend](https://www.vaultproject.io/docs/secrets/generic/index.html)\n\nThis resource is primarily intended to be used with both v1 and v2 of\n[Vault's \"generic\" secret backend](https://www.vaultproject.io/docs/secrets/generic/index.html).\nWhile it is also compatible, with some limitations, with other Vault\nendpoints that support the `vault write` command to create and the\n`vault delete` command to delete, see also\nthe [generic endpoint resource](generic_endpoint.html) for a more\nflexible way to manage arbitrary data.\n\n~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/vault/TF-Vault-GenericSecret/docs/README.md",
    "definitions": {
        "DataDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AllowRead": {
            "type": "boolean",
            "description": "True/false. Set this to true if your\nvault authentication is able to read the data, this allows the resource to be\ncompared and updated. Defaults to false."
        },
        "Data": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/DataDefinition"
            }
        },
        "DataJson": {
            "type": "string",
            "description": "String containing a JSON-encoded object that will be\nwritten as the secret data at the given path."
        },
        "DisableRead": {
            "type": "boolean",
            "description": "True/false. Set this to true if your vault\nauthentication is not able to read the data. Setting this to `true` will\nbreak drift detection. Defaults to false."
        },
        "Id": {
            "type": "string"
        },
        "Path": {
            "type": "string",
            "description": "The full logical path at which to write the given data.\nTo write data into the \"generic\" secret backend mounted in Vault by default,\nthis should be prefixed with `secret/`. Writing to other backends with this\nresource is possible; consult each backend's documentation to see which\nendpoints support the `PUT` and `DELETE` methods."
        }
    },
    "additionalProperties": false,
    "required": [
        "DataJson",
        "Path"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Data",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/properties/Data",
        "/properties/DataJson"
    ]
}