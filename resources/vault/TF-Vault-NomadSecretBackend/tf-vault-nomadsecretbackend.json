{
    "typeName": "TF::Vault::NomadSecretBackend",
    "description": "Creates a Nomad Secret Backend for Vault. The Nomad secret backend for Vault\ngenerates Nomad ACL tokens dynamically based on pre-existing Nomad ACL policies.\n\n~> **Important** All data provided in the resource configuration will be\nwritten in cleartext to state and plan files generated by Terraform, and\nwill appear in the console output when Terraform runs. Protect these\nartifacts accordingly. See\n[the main provider documentation](../index.html)\nfor more details.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/vault/TF-Vault-NomadSecretBackend/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Address": {
            "type": "string",
            "description": "Specifies the address of the Nomad instance, provided\nas \"protocol://host:port\" like \"http://127.0.0.1:4646\"."
        },
        "Backend": {
            "type": "string",
            "description": "The unique path this backend should be mounted at. Must\nnot begin or end with a `/`. Defaults to `nomad`."
        },
        "CaCert": {
            "type": "string",
            "description": "CA certificate to use when verifying the Nomad server certificate, must be\nx509 PEM encoded."
        },
        "ClientCert": {
            "type": "string",
            "description": "Client certificate to provide to the Nomad server, must be x509 PEM encoded."
        },
        "ClientKey": {
            "type": "string",
            "description": "Client certificate key to provide to the Nomad server, must be x509 PEM encoded."
        },
        "DefaultLeaseTtlSeconds": {
            "type": "number",
            "description": "Default lease duration for secrets in seconds."
        },
        "Description": {
            "type": "string",
            "description": "Human-friendly description of the mount for the Active Directory backend."
        },
        "Id": {
            "type": "string"
        },
        "Local": {
            "type": "boolean",
            "description": "Mark the secrets engine as local-only. Local engines are not replicated or removed by\nreplication.Tolerance duration to use when checking the last rotation time."
        },
        "MaxLeaseTtlSeconds": {
            "type": "number"
        },
        "MaxTokenNameLength": {
            "type": "number",
            "description": "Specifies the maximum length to use for the name of the Nomad token\ngenerated with Generate Credential. If omitted, 0 is used and ignored, defaulting to the max value allowed\nby the Nomad version."
        },
        "MaxTtl": {
            "type": "number",
            "description": "Maximum possible lease duration for secrets in seconds."
        },
        "Token": {
            "type": "string",
            "description": "Specifies the Nomad Management token to use."
        },
        "Ttl": {
            "type": "number",
            "description": "Specifies the ttl of the lease for the generated token."
        }
    },
    "additionalProperties": false,
    "required": [],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/properties/ClientCert",
        "/properties/ClientKey",
        "/properties/Token"
    ]
}