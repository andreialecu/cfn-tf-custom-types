{
    "typeName": "TF::Vault::AwsAuthBackendStsRole",
    "description": "Manages an STS role in a Vault server. STS roles are mappings\nbetween account IDs and STS ARNs. When a login attempt is made\nfrom an EC2 instance in the account ID specified, the associated\nSTS role will be used to verify the request. For more information,\nsee the [Vault documentation](https://www.vaultproject.io/docs/auth/aws.html#cross-account-access).\n\n~> **Important** All data provided in the resource configuration will be\n written in cleartext to state and plan files generated by Terraform, and will\n appear in the console output when Terraform runs. Protect these artifacts\n accordingly. See [the main provider documentation](../../index.html) for more\n details.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/vault/TF-Vault-AwsAuthBackendStsRole/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AccountId": {
            "type": "string",
            "description": "The AWS account ID to configure the STS role for."
        },
        "Backend": {
            "type": "string",
            "description": "The path the AWS auth backend being configured was\nmounted at.  Defaults to `aws`."
        },
        "Id": {
            "type": "string"
        },
        "StsRole": {
            "type": "string",
            "description": "The STS role to assume when verifying requests made\nby EC2 instances in the account specified by `account_id`."
        }
    },
    "additionalProperties": false,
    "required": [
        "AccountId",
        "StsRole"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}