{
    "typeName": "TF::Vault::PkiSecretBackendRole",
    "description": "Creates a role on an PKI Secret Backend for Vault.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/vault/TF-Vault-PkiSecretBackendRole/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AllowAnyName": {
            "type": "boolean",
            "description": "Flag to allow any name."
        },
        "AllowBareDomains": {
            "type": "boolean",
            "description": "Flag to allow certificates matching the actual domain."
        },
        "AllowGlobDomains": {
            "type": "boolean",
            "description": "Flag to allow names containing glob patterns."
        },
        "AllowIpSans": {
            "type": "boolean",
            "description": "Flag to allow IP SANs."
        },
        "AllowLocalhost": {
            "type": "boolean",
            "description": "Flag to allow certificates for localhost."
        },
        "AllowSubdomains": {
            "type": "boolean",
            "description": "Flag to allow certificates matching subdomains."
        },
        "AllowedDomains": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "List of allowed domains for certificates."
        },
        "AllowedDomainsTemplate": {
            "type": "boolean",
            "description": "Flag, if set, `allowed_domains` can be specified using identity template expressions such as `{{identity.entity.aliases.<mount accessor>.name}}`."
        },
        "AllowedOtherSans": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "Defines allowed custom SANs."
        },
        "AllowedUriSans": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "Defines allowed URI SANs."
        },
        "Backend": {
            "type": "string",
            "description": "The path the PKI secret backend is mounted at, with no leading or trailing `/`s."
        },
        "BasicConstraintsValidForNonCa": {
            "type": "boolean",
            "description": "Flag to mark basic constraints valid when issuing non-CA certificates."
        },
        "ClientFlag": {
            "type": "boolean",
            "description": "Flag to specify certificates for client use."
        },
        "CodeSigningFlag": {
            "type": "boolean",
            "description": "Flag to specify certificates for code signing use."
        },
        "Country": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "The country of generated certificates."
        },
        "EmailProtectionFlag": {
            "type": "boolean",
            "description": "Flag to specify certificates for email protection use."
        },
        "EnforceHostnames": {
            "type": "boolean",
            "description": "Flag to allow only valid host names."
        },
        "ExtKeyUsage": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "Specify the allowed extended key usage constraint on issued certificates."
        },
        "GenerateLease": {
            "type": "boolean",
            "description": "Flag to generate leases with certificates."
        },
        "Id": {
            "type": "string"
        },
        "KeyBits": {
            "type": "number",
            "description": "The number of bits of generated keys."
        },
        "KeyType": {
            "type": "string",
            "description": "The type of generated keys."
        },
        "KeyUsage": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "Specify the allowed key usage constraint on issued certificates."
        },
        "Locality": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "The locality of generated certificates."
        },
        "MaxTtl": {
            "type": "string",
            "description": "The maximum TTL."
        },
        "Name": {
            "type": "string",
            "description": "The name to identify this role within the backend. Must be unique within the backend."
        },
        "NoStore": {
            "type": "boolean",
            "description": "Flag to not store certificates in the storage backend."
        },
        "NotBeforeDuration": {
            "type": "string",
            "description": "Specifies the duration by which to backdate the NotBefore property."
        },
        "Organization": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "The organization of generated certificates."
        },
        "Ou": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "The organization unit of generated certificates."
        },
        "PolicyIdentifiers": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "Specify the list of allowed policies IODs."
        },
        "PostalCode": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "The postal code of generated certificates."
        },
        "Province": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "The province of generated certificates."
        },
        "RequireCn": {
            "type": "boolean",
            "description": "Flag to force CN usage."
        },
        "ServerFlag": {
            "type": "boolean",
            "description": "Flag to specify certificates for server use."
        },
        "StreetAddress": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "The street address of generated certificates."
        },
        "Ttl": {
            "type": "string",
            "description": "The TTL."
        },
        "UseCsrCommonName": {
            "type": "boolean",
            "description": "Flag to use the CN in the CSR."
        },
        "UseCsrSans": {
            "type": "boolean",
            "description": "Flag to use the SANs in the CSR."
        }
    },
    "additionalProperties": false,
    "required": [
        "Backend",
        "Name"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}