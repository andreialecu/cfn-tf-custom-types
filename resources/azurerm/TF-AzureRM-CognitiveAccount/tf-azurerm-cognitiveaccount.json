{
    "typeName": "TF::AzureRM::CognitiveAccount",
    "description": "Manages a Cognitive Services Account.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/azurerm/TF-AzureRM-CognitiveAccount/docs/README.md",
    "definitions": {
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "NetworkAclsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "DefaultAction": {
                    "type": "string",
                    "description": "The Default Action to use when no rules match from `ip_rules` / `virtual_network_subnet_ids`. Possible values are `Allow` and `Deny`."
                },
                "IpRules": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more IP Addresses, or CIDR Blocks which should be able to access the Cognitive Account."
                },
                "VirtualNetworkSubnetIds": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more Subnet ID's which should be able to access this Cognitive Account."
                }
            },
            "required": [
                "DefaultAction"
            ]
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Read": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "CustomSubdomainName": {
            "type": "string",
            "description": "The subdomain name used for token-based authentication. Changing this forces a new resource to be created."
        },
        "Endpoint": {
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "Kind": {
            "type": "string",
            "description": "Specifies the type of Cognitive Service Account that should be created. Possible values are `Academic`, `AnomalyDetector`, `Bing.Autosuggest`, `Bing.Autosuggest.v7`, `Bing.CustomSearch`, `Bing.Search`, `Bing.Search.v7`, `Bing.Speech`, `Bing.SpellCheck`, `Bing.SpellCheck.v7`, `CognitiveServices`, `ComputerVision`, `ContentModerator`, `CustomSpeech`, `CustomVision.Prediction`, `CustomVision.Training`, `Emotion`, `Face`,`FormRecognizer`, `ImmersiveReader`, `LUIS`, `LUIS.Authoring`, `Personalizer`, `QnAMaker`, `Recommendations`, `SpeakerRecognition`, `Speech`, `SpeechServices`, `SpeechTranslation`, `TextAnalytics`, `TextTranslation` and `WebLM`. Changing this forces a new resource to be created."
        },
        "Location": {
            "type": "string",
            "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created."
        },
        "Name": {
            "type": "string",
            "description": "Specifies the name of the Cognitive Service Account. Changing this forces a new resource to be created."
        },
        "PrimaryAccessKey": {
            "type": "string"
        },
        "QnaRuntimeEndpoint": {
            "type": "string",
            "description": "A URL to link a QnAMaker cognitive account to a QnA runtime."
        },
        "ResourceGroupName": {
            "type": "string",
            "description": "The name of the resource group in which the Cognitive Service Account is created. Changing this forces a new resource to be created."
        },
        "SecondaryAccessKey": {
            "type": "string"
        },
        "SkuName": {
            "type": "string",
            "description": "Specifies the SKU Name for this Cognitive Service Account. Possible values are `F0`, `F1`, `S`, `S0`, `S1`, `S2`, `S3`, `S4`, `S5`, `S6`, `P0`, `P1`, and `P2`."
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "A mapping of tags to assign to the resource."
        },
        "NetworkAcls": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/NetworkAclsDefinition"
            },
            "maxItems": 1
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [
        "Kind",
        "Location",
        "Name",
        "ResourceGroupName",
        "SkuName"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Endpoint",
        "/properties/Id",
        "/properties/PrimaryAccessKey",
        "/properties/SecondaryAccessKey"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/properties/PrimaryAccessKey",
        "/properties/SecondaryAccessKey"
    ]
}