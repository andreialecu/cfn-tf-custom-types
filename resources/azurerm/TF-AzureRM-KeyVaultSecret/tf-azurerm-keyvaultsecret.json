{
    "typeName": "TF::AzureRM::KeyVaultSecret",
    "description": "Manages a Key Vault Secret.\n\n~> **Note:** All arguments including the secret value will be stored in the raw state as plain-text.\n[Read more about sensitive data in state](/docs/state/sensitive-data.html).",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/azurerm/TF-AzureRM-KeyVaultSecret/docs/README.md",
    "definitions": {
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Read": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "ContentType": {
            "type": "string",
            "description": "Specifies the content type for the Key Vault Secret."
        },
        "ExpirationDate": {
            "type": "string",
            "description": "Expiration UTC datetime (Y-m-d'T'H:M:S'Z')."
        },
        "Id": {
            "type": "string"
        },
        "KeyVaultId": {
            "type": "string",
            "description": "The ID of the Key Vault where the Secret should be created."
        },
        "Name": {
            "type": "string",
            "description": "Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created."
        },
        "NotBeforeDate": {
            "type": "string",
            "description": "Key not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z')."
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "A mapping of tags to assign to the resource."
        },
        "Value": {
            "type": "string",
            "description": "Specifies the value of the Key Vault Secret."
        },
        "Version": {
            "type": "string"
        },
        "VersionlessId": {
            "type": "string"
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [
        "KeyVaultId",
        "Name",
        "Value"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/Version",
        "/properties/VersionlessId"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/properties/Value"
    ]
}