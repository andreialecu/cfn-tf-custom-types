{
    "typeName": "TF::AzureRM::AppService",
    "description": "Manages an App Service (within an App Service Plan).\n\n-> **Note:** When using Slots - the `app_settings`, `connection_string` and `site_config` blocks on the `azurerm_app_service` resource will be overwritten when promoting a Slot using the `azurerm_app_service_active_slot` resource.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/azurerm/TF-AzureRM-AppService/docs/README.md",
    "definitions": {
        "AppSettingsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "SiteCredentialDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Password": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            }
        },
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "AuthSettingsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AdditionalLoginParams": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/AdditionalLoginParamsDefinition"
                    },
                    "description": "Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form \"key=value\"."
                },
                "AllowedExternalRedirectUrls": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    },
                    "description": "External URLs that can be redirected to as part of logging in or logging out of the app."
                },
                "DefaultProvider": {
                    "type": "string",
                    "description": "The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`."
                },
                "Enabled": {
                    "type": "boolean",
                    "description": "Is Authentication enabled?."
                },
                "Issuer": {
                    "type": "string",
                    "description": "Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/."
                },
                "RuntimeVersion": {
                    "type": "string",
                    "description": "The runtime version of the Authentication/Authorization module."
                },
                "TokenRefreshExtensionHours": {
                    "type": "number",
                    "description": "The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72."
                },
                "TokenStoreEnabled": {
                    "type": "boolean",
                    "description": "If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to false."
                },
                "UnauthenticatedClientAction": {
                    "type": "string",
                    "description": "The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`."
                },
                "ActiveDirectory": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/ActiveDirectoryDefinition"
                    },
                    "maxItems": 1
                },
                "Facebook": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/FacebookDefinition"
                    },
                    "maxItems": 1
                },
                "Google": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/GoogleDefinition"
                    },
                    "maxItems": 1
                },
                "Microsoft": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/MicrosoftDefinition"
                    },
                    "maxItems": 1
                },
                "Twitter": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/TwitterDefinition"
                    },
                    "maxItems": 1
                }
            },
            "required": [
                "Enabled"
            ]
        },
        "AdditionalLoginParamsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "BackupDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Enabled": {
                    "type": "boolean",
                    "description": "Is this Backup enabled?."
                },
                "Name": {
                    "type": "string"
                },
                "StorageAccountUrl": {
                    "type": "string"
                },
                "Schedule": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/ScheduleDefinition"
                    },
                    "maxItems": 1,
                    "minItems": 1
                }
            },
            "required": [
                "Name",
                "StorageAccountUrl"
            ]
        },
        "ConnectionStringDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Name": {
                    "type": "string",
                    "description": "The name of the Connection String."
                },
                "Type": {
                    "type": "string",
                    "description": "The type of the Connection String. Possible values are `APIHub`, `Custom`, `DocDb`, `EventHub`, `MySQL`, `NotificationHub`, `PostgreSQL`, `RedisCache`, `ServiceBus`, `SQLAzure` and  `SQLServer`."
                },
                "Value": {
                    "type": "string",
                    "description": "The value for the Connection String."
                }
            },
            "required": [
                "Name",
                "Type",
                "Value"
            ]
        },
        "IdentityDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "IdentityIds": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of user managed identity ids to be assigned. Required if `type` is `UserAssigned`."
                },
                "Type": {
                    "type": "string",
                    "description": "Specifies the identity type of the App Service. Possible values are `SystemAssigned` (where Azure will generate a Service Principal for you), `UserAssigned` where you can specify the Service Principal IDs in the `identity_ids` field, and `SystemAssigned, UserAssigned` which assigns both a system managed identity as well as the specified user assigned identities."
                }
            },
            "required": [
                "Type"
            ]
        },
        "LogsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "DetailedErrorMessagesEnabled": {
                    "type": "boolean",
                    "description": "Should `Detailed error messages` be enabled on this App Service? Defaults to `false`."
                },
                "FailedRequestTracingEnabled": {
                    "type": "boolean",
                    "description": "Should `Failed request tracing` be enabled on this App Service? Defaults to `false`."
                },
                "ApplicationLogs": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/ApplicationLogsDefinition"
                    },
                    "maxItems": 1
                },
                "HttpLogs": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/HttpLogsDefinition"
                    },
                    "maxItems": 1
                }
            },
            "required": []
        },
        "SiteConfigDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AlwaysOn": {
                    "type": "boolean",
                    "description": "Should the app be loaded at all times? Defaults to `false`."
                },
                "AppCommandLine": {
                    "type": "string",
                    "description": "App command line to launch, e.g. `/sbin/myserver -b 0.0.0.0`."
                },
                "AutoSwapSlotName": {
                    "type": "string"
                },
                "DefaultDocuments": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    },
                    "description": "The ordering of default documents to load, if an address isn't specified."
                },
                "DotnetFrameworkVersion": {
                    "type": "string",
                    "description": "The version of the .net framework's CLR used in this App Service. Possible values are `v2.0` (which will use the latest version of the .net framework for the .net CLR v2 - currently `.net 3.5`), `v4.0` (which corresponds to the latest version of the .net CLR v4 - which at the time of writing is `.net 4.7.1`) and `v5.0`. [For more information on which .net CLR version to use based on the .net framework you're targeting - please see this table](https://en.wikipedia.org/wiki/.NET_Framework_version_history#Overview). Defaults to `v4.0`."
                },
                "FtpsState": {
                    "type": "string",
                    "description": "State of FTP / FTPS service for this App Service. Possible values include: `AllAllowed`, `FtpsOnly` and `Disabled`."
                },
                "HealthCheckPath": {
                    "type": "string",
                    "description": "The health check path to be pinged by App Service. [For more information - please see App Service health check announcement](https://azure.github.io/AppService/2020/08/24/healthcheck-on-app-service.html)."
                },
                "Http2Enabled": {
                    "type": "boolean",
                    "description": "Is HTTP2 Enabled on this App Service? Defaults to `false`."
                },
                "IpRestriction": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "$ref": "#/definitions/IpRestrictionDefinition2"
                    },
                    "description": "A [List of objects](/docs/configuration/attr-as-blocks.html) representing ip restrictions as defined below."
                },
                "JavaContainer": {
                    "type": "string",
                    "description": "The Java Container to use. If specified `java_version` and `java_container_version` must also be specified. Possible values are `JAVA`, `JETTY`, and `TOMCAT`."
                },
                "JavaContainerVersion": {
                    "type": "string",
                    "description": "The version of the Java Container to use. If specified `java_version` and `java_container` must also be specified."
                },
                "JavaVersion": {
                    "type": "string",
                    "description": "The version of Java to use. If specified `java_container` and `java_container_version` must also be specified. Possible values are `1.7`, `1.8` and `11` and their specific versions - except for Java 11 (e.g. `1.7.0_80`, `1.8.0_181`, `11`)."
                },
                "LinuxFxVersion": {
                    "type": "string",
                    "description": "Linux App Framework and version for the App Service. Possible options are a Docker container (`DOCKER|<user/image:tag>`), a base-64 encoded Docker Compose file (`COMPOSE|${filebase64(\"compose.yml\")}`) or a base-64 encoded Kubernetes Manifest (`KUBE|${filebase64(\"kubernetes.yml\")}`)."
                },
                "LocalMysqlEnabled": {
                    "type": "boolean",
                    "description": "Is \"MySQL In App\" Enabled? This runs a local MySQL instance with your app and shares resources from the App Service plan."
                },
                "ManagedPipelineMode": {
                    "type": "string",
                    "description": "The Managed Pipeline Mode. Possible values are `Integrated` and `Classic`. Defaults to `Integrated`."
                },
                "MinTlsVersion": {
                    "type": "string",
                    "description": "The minimum supported TLS version for the app service. Possible values are `1.0`, `1.1`, and `1.2`. Defaults to `1.2` for new app services."
                },
                "NumberOfWorkers": {
                    "type": "number",
                    "description": "The scaled number of workers (for per site scaling) of this App Service. Requires that `per_site_scaling` is enabled on the `azurerm_app_service_plan`. [For more information - please see Microsoft documentation on high-density hosting](https://docs.microsoft.com/en-us/azure/app-service/manage-scale-per-app)."
                },
                "PhpVersion": {
                    "type": "string",
                    "description": "The version of PHP to use in this App Service. Possible values are `5.5`, `5.6`, `7.0`, `7.1`, `7.2`, `7.3` and `7.4`."
                },
                "PythonVersion": {
                    "type": "string",
                    "description": "The version of Python to use in this App Service. Possible values are `2.7` and `3.4`."
                },
                "RemoteDebuggingEnabled": {
                    "type": "boolean",
                    "description": "Is Remote Debugging Enabled? Defaults to `false`."
                },
                "RemoteDebuggingVersion": {
                    "type": "string",
                    "description": "Which version of Visual Studio should the Remote Debugger be compatible with? Possible values are `VS2012`, `VS2013`, `VS2015` and `VS2017`."
                },
                "ScmIpRestriction": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "$ref": "#/definitions/ScmIpRestrictionDefinition2"
                    },
                    "description": "A [List of objects](/docs/configuration/attr-as-blocks.html) representing ip restrictions as defined below."
                },
                "ScmType": {
                    "type": "string",
                    "description": "The type of Source Control enabled for this App Service. Defaults to `None`. Possible values are: `BitbucketGit`, `BitbucketHg`, `CodePlexGit`, `CodePlexHg`, `Dropbox`, `ExternalGit`, `ExternalHg`, `GitHub`, `LocalGit`, `None`, `OneDrive`, `Tfs`, `VSO`, and `VSTSRM`."
                },
                "ScmUseMainIpRestriction": {
                    "type": "boolean",
                    "description": "IP security restrictions for scm to use main. Defaults to false."
                },
                "Use32BitWorkerProcess": {
                    "type": "boolean",
                    "description": "Should the App Service run in 32 bit mode, rather than 64 bit mode?."
                },
                "WebsocketsEnabled": {
                    "type": "boolean",
                    "description": "Should WebSockets be enabled?."
                },
                "WindowsFxVersion": {
                    "type": "string",
                    "description": "The Windows Docker container image (`DOCKER|<user/image:tag>`)."
                },
                "Cors": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/CorsDefinition"
                    },
                    "maxItems": 1
                }
            },
            "required": []
        },
        "IpRestrictionDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "XAzureFdid": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    }
                },
                "XFdHealthProbe": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    }
                },
                "XForwardedFor": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    }
                },
                "XForwardedHost": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "IpRestrictionDefinition2": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Action": {
                    "type": "string"
                },
                "Headers": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "$ref": "#/definitions/IpRestrictionDefinition"
                    }
                },
                "IpAddress": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Priority": {
                    "type": "number"
                },
                "ServiceTag": {
                    "type": "string"
                },
                "VirtualNetworkSubnetId": {
                    "type": "string"
                }
            }
        },
        "ScmIpRestrictionDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "XAzureFdid": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    }
                },
                "XFdHealthProbe": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    }
                },
                "XForwardedFor": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    }
                },
                "XForwardedHost": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ScmIpRestrictionDefinition2": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Action": {
                    "type": "string"
                },
                "Headers": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "$ref": "#/definitions/ScmIpRestrictionDefinition"
                    }
                },
                "IpAddress": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "Priority": {
                    "type": "number"
                },
                "ServiceTag": {
                    "type": "string"
                },
                "VirtualNetworkSubnetId": {
                    "type": "string"
                }
            }
        },
        "SourceControlDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Branch": {
                    "type": "string",
                    "description": "The branch of the remote repository to use. Defaults to 'master'."
                },
                "ManualIntegration": {
                    "type": "boolean",
                    "description": "Limits to manual integration. Defaults to `false` if not specified."
                },
                "RepoUrl": {
                    "type": "string",
                    "description": "The URL of the source code repository."
                },
                "RollbackEnabled": {
                    "type": "boolean",
                    "description": "Enable roll-back for the repository. Defaults to `false` if not specified."
                },
                "UseMercurial": {
                    "type": "boolean",
                    "description": "Use Mercurial if `true`, otherwise uses Git."
                }
            },
            "required": []
        },
        "StorageAccountDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AccessKey": {
                    "type": "string",
                    "description": "The access key for the storage account."
                },
                "AccountName": {
                    "type": "string",
                    "description": "The name of the storage account."
                },
                "MountPath": {
                    "type": "string",
                    "description": "The path to mount the storage within the site's runtime environment."
                },
                "Name": {
                    "type": "string",
                    "description": "The name of the storage account identifier."
                },
                "ShareName": {
                    "type": "string",
                    "description": "The name of the file share (container name, for Blob storage)."
                },
                "Type": {
                    "type": "string",
                    "description": "The type of storage. Possible values are `AzureBlob` and `AzureFiles`."
                }
            },
            "required": [
                "AccessKey",
                "AccountName",
                "Name",
                "ShareName",
                "Type"
            ]
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Read": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        },
        "ActiveDirectoryDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AllowedAudiences": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    }
                },
                "ClientId": {
                    "type": "string",
                    "description": "The Client ID of this relying party application. Enables OpenIDConnection authentication with Azure Active Directory."
                },
                "ClientSecret": {
                    "type": "string",
                    "description": "The Client Secret of this relying party application. If no secret is provided, implicit flow will be used."
                }
            },
            "required": [
                "ClientId"
            ]
        },
        "FacebookDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AppId": {
                    "type": "string",
                    "description": "The App ID of the Facebook app used for login."
                },
                "AppSecret": {
                    "type": "string",
                    "description": "The App Secret of the Facebook app used for Facebook Login."
                },
                "OauthScopes": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "AppId",
                "AppSecret"
            ]
        },
        "GoogleDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "ClientId": {
                    "type": "string",
                    "description": "The OpenID Connect Client ID for the Google web application."
                },
                "ClientSecret": {
                    "type": "string",
                    "description": "The client secret associated with the Google web application."
                },
                "OauthScopes": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "ClientId",
                "ClientSecret"
            ]
        },
        "MicrosoftDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "ClientId": {
                    "type": "string",
                    "description": "The OAuth 2.0 client ID that was created for the app used for authentication."
                },
                "ClientSecret": {
                    "type": "string",
                    "description": "The OAuth 2.0 client secret that was created for the app used for authentication."
                },
                "OauthScopes": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "ClientId",
                "ClientSecret"
            ]
        },
        "TwitterDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "ConsumerKey": {
                    "type": "string"
                },
                "ConsumerSecret": {
                    "type": "string"
                }
            },
            "required": [
                "ConsumerKey",
                "ConsumerSecret"
            ]
        },
        "ScheduleDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "FrequencyInterval": {
                    "type": "number",
                    "description": "Sets how often the backup should be executed."
                },
                "FrequencyUnit": {
                    "type": "string",
                    "description": "Sets the unit of time for how often the backup should be executed. Possible values are `Day` or `Hour`."
                },
                "KeepAtLeastOneBackup": {
                    "type": "boolean",
                    "description": "Should at least one backup always be kept in the Storage Account by the Retention Policy, regardless of how old it is?."
                },
                "RetentionPeriodInDays": {
                    "type": "number",
                    "description": "Specifies the number of days after which Backups should be deleted."
                },
                "StartTime": {
                    "type": "string",
                    "description": "Sets when the schedule should start working."
                }
            },
            "required": [
                "FrequencyInterval",
                "FrequencyUnit"
            ]
        },
        "ApplicationLogsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "FileSystemLevel": {
                    "type": "string"
                },
                "AzureBlobStorage": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/AzureBlobStorageDefinition"
                    },
                    "maxItems": 1
                }
            },
            "required": []
        },
        "HttpLogsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AzureBlobStorage": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/AzureBlobStorageDefinition"
                    },
                    "maxItems": 1
                },
                "FileSystem": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/FileSystemDefinition"
                    },
                    "maxItems": 1
                }
            },
            "required": []
        },
        "CorsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AllowedOrigins": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of origins which should be able to make cross-origin calls. `*` can be used to allow all calls."
                },
                "SupportCredentials": {
                    "type": "boolean",
                    "description": "Are credentials supported?."
                }
            },
            "required": [
                "AllowedOrigins"
            ]
        },
        "AzureBlobStorageDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "RetentionInDays": {
                    "type": "number",
                    "description": "The number of days to retain logs for."
                },
                "SasUrl": {
                    "type": "string",
                    "description": "The URL to the storage container with a shared access signature token appended."
                }
            },
            "required": [
                "RetentionInDays",
                "SasUrl"
            ]
        },
        "FileSystemDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "RetentionInDays": {
                    "type": "number",
                    "description": "The number of days to retain logs for."
                },
                "RetentionInMb": {
                    "type": "number",
                    "description": "The maximum size in megabytes that http log files can use before being removed."
                }
            },
            "required": [
                "RetentionInDays",
                "RetentionInMb"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AppServicePlanId": {
            "type": "string",
            "description": "The ID of the App Service Plan within which to create this App Service."
        },
        "AppSettings": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/AppSettingsDefinition"
            },
            "description": "A key-value pair of App Settings."
        },
        "ClientAffinityEnabled": {
            "type": "boolean",
            "description": "Should the App Service send session affinity cookies, which route client requests in the same session to the same instance?."
        },
        "ClientCertEnabled": {
            "type": "boolean",
            "description": "Does the App Service require client certificates for incoming requests? Defaults to `false`."
        },
        "CustomDomainVerificationId": {
            "type": "string"
        },
        "DefaultSiteHostname": {
            "type": "string"
        },
        "Enabled": {
            "type": "boolean",
            "description": "Is the App Service Enabled?."
        },
        "HttpsOnly": {
            "type": "boolean",
            "description": "Can the App Service only be accessed via HTTPS? Defaults to `false`."
        },
        "Id": {
            "type": "string"
        },
        "Location": {
            "type": "string",
            "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created."
        },
        "Name": {
            "type": "string",
            "description": "Specifies the name of the App Service. Changing this forces a new resource to be created."
        },
        "OutboundIpAddressList": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            }
        },
        "OutboundIpAddresses": {
            "type": "string"
        },
        "PossibleOutboundIpAddressList": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            }
        },
        "PossibleOutboundIpAddresses": {
            "type": "string"
        },
        "ResourceGroupName": {
            "type": "string",
            "description": "The name of the resource group in which to create the App Service."
        },
        "SiteCredential": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/SiteCredentialDefinition"
            }
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "A mapping of tags to assign to the resource."
        },
        "AuthSettings": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/AuthSettingsDefinition"
            },
            "maxItems": 1
        },
        "Backup": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/BackupDefinition"
            },
            "maxItems": 1
        },
        "ConnectionString": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/ConnectionStringDefinition"
            }
        },
        "Identity": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/IdentityDefinition"
            },
            "maxItems": 1
        },
        "Logs": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/LogsDefinition"
            },
            "maxItems": 1
        },
        "SiteConfig": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/SiteConfigDefinition"
            },
            "maxItems": 1
        },
        "SourceControl": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/SourceControlDefinition"
            },
            "maxItems": 1
        },
        "StorageAccount": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/StorageAccountDefinition"
            }
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [
        "AppServicePlanId",
        "Location",
        "Name",
        "ResourceGroupName"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/CustomDomainVerificationId",
        "/properties/DefaultSiteHostname",
        "/properties/Id",
        "/properties/OutboundIpAddressList",
        "/properties/OutboundIpAddresses",
        "/properties/PossibleOutboundIpAddressList",
        "/properties/PossibleOutboundIpAddresses",
        "/properties/SiteCredential"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/definitions/BackupDefinition/StorageAccountUrl",
        "/definitions/ConnectionStringDefinition/Value",
        "/definitions/StorageAccountDefinition/AccessKey",
        "/definitions/ActiveDirectoryDefinition/ClientSecret",
        "/definitions/FacebookDefinition/AppSecret",
        "/definitions/GoogleDefinition/ClientSecret",
        "/definitions/MicrosoftDefinition/ClientSecret",
        "/definitions/TwitterDefinition/ConsumerSecret",
        "/definitions/AzureBlobStorageDefinition/SasUrl"
    ]
}