{
    "typeName": "TF::AzureRM::LbOutboundRule",
    "description": "Manages a Load Balancer Outbound Rule.\n\n~> **NOTE** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration and a Backend Address Pool Attached.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/azurerm/TF-AzureRM-LbOutboundRule/docs/README.md",
    "definitions": {
        "FrontendIpConfigurationDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Name": {
                    "type": "string",
                    "description": "The name of the Frontend IP Configuration."
                }
            },
            "required": [
                "Name"
            ]
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Read": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AllocatedOutboundPorts": {
            "type": "number",
            "description": "The number of outbound ports to be used for NAT."
        },
        "BackendAddressPoolId": {
            "type": "string",
            "description": "The ID of the Backend Address Pool. Outbound traffic is randomly load balanced across IPs in the backend IPs."
        },
        "EnableTcpReset": {
            "type": "boolean",
            "description": "Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP."
        },
        "Id": {
            "type": "string"
        },
        "IdleTimeoutInMinutes": {
            "type": "number",
            "description": "The timeout for the TCP idle connection."
        },
        "LoadbalancerId": {
            "type": "string",
            "description": "The ID of the Load Balancer in which to create the Outbound Rule. Changing this forces a new resource to be created."
        },
        "Name": {
            "type": "string",
            "description": "Specifies the name of the Outbound Rule. Changing this forces a new resource to be created."
        },
        "Protocol": {
            "type": "string",
            "description": "The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`."
        },
        "ResourceGroupName": {
            "type": "string",
            "description": "The name of the resource group in which to create the resource. Changing this forces a new resource to be created."
        },
        "FrontendIpConfiguration": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/FrontendIpConfigurationDefinition"
            }
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [
        "BackendAddressPoolId",
        "LoadbalancerId",
        "Name",
        "Protocol",
        "ResourceGroupName"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}