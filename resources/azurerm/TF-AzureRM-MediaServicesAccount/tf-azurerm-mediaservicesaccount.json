{
    "typeName": "TF::AzureRM::MediaServicesAccount",
    "description": "Manages a Media Services Account.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/azurerm/TF-AzureRM-MediaServicesAccount/docs/README.md",
    "definitions": {
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "IdentityDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Type": {
                    "type": "string",
                    "description": "Specifies the type of Managed Service Identity that should be configured on this Media Services Account. Possible value is  `SystemAssigned`."
                }
            },
            "required": []
        },
        "KeyDeliveryAccessControlDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "DefaultAction": {
                    "type": "string",
                    "description": "The Default Action to use when no rules match from `ip_allow_list`. Possible values are `Allow` and `Deny`."
                },
                "IpAllowList": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more IP Addresses, or CIDR Blocks which should be able to access the Key Delivery."
                }
            },
            "required": []
        },
        "StorageAccountDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Id": {
                    "type": "string",
                    "description": "Specifies the ID of the Storage Account that will be associated with the Media Services instance."
                },
                "IsPrimary": {
                    "type": "boolean",
                    "description": "Specifies whether the storage account should be the primary account or not. Defaults to `false`."
                }
            },
            "required": [
                "Id"
            ]
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Read": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "Location": {
            "type": "string",
            "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created."
        },
        "Name": {
            "type": "string",
            "description": "Specifies the name of the Media Services Account. Changing this forces a new resource to be created."
        },
        "ResourceGroupName": {
            "type": "string",
            "description": "The name of the resource group in which to create the Media Services Account. Changing this forces a new resource to be created."
        },
        "StorageAuthenticationType": {
            "type": "string",
            "description": "Specifies the storage authentication type.\nPossible value is  `ManagedIdentity` or `System`."
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "A mapping of tags assigned to the resource."
        },
        "Identity": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/IdentityDefinition"
            },
            "maxItems": 1
        },
        "KeyDeliveryAccessControl": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/KeyDeliveryAccessControlDefinition"
            },
            "maxItems": 1
        },
        "StorageAccount": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/StorageAccountDefinition"
            },
            "minItems": 1
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [
        "Location",
        "Name",
        "ResourceGroupName"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}