{
    "typeName": "TF::AzureRM::CosmosdbAccount",
    "description": "Manages a CosmosDB (formally DocumentDB) Account.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/azurerm/TF-AzureRM-CosmosdbAccount/docs/README.md",
    "definitions": {
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "BackupDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "IntervalInMinutes": {
                    "type": "number",
                    "description": "The interval in minutes between two backups. This is configurable only when `type` is `Periodic`. Possible values are between 60 and 1440."
                },
                "RetentionInHours": {
                    "type": "number",
                    "description": "The time in hours that each backup is retained. This is configurable only when `type` is `Periodic`. Possible values are between 8 and 720."
                },
                "Type": {
                    "type": "string",
                    "description": "The type of the `backup`. Possible values are `Continuous` and `Periodic`. Defaults to `Periodic`."
                }
            },
            "required": [
                "Type"
            ]
        },
        "CapabilitiesDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Name": {
                    "type": "string",
                    "description": "The capability to enable - Possible values are `AllowSelfServeUpgradeToMongo36`, `DisableRateLimitingResponses`, `EnableAggregationPipeline`, `EnableCassandra`, `EnableGremlin`, `EnableMongo`, `EnableTable`, `EnableServerless`, `MongoDBv3.4` and `mongoEnableDocLevelTTL`."
                }
            },
            "required": [
                "Name"
            ]
        },
        "ConsistencyPolicyDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "ConsistencyLevel": {
                    "type": "string",
                    "description": "The Consistency Level to use for this CosmosDB Account - can be either `BoundedStaleness`, `Eventual`, `Session`, `Strong` or `ConsistentPrefix`."
                },
                "MaxIntervalInSeconds": {
                    "type": "number",
                    "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is `5` - `86400` (1 day). Defaults to `5`. Required when `consistency_level` is set to `BoundedStaleness`."
                },
                "MaxStalenessPrefix": {
                    "type": "number",
                    "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is `10` \u2013 `2147483647`. Defaults to `100`. Required when `consistency_level` is set to `BoundedStaleness`."
                }
            },
            "required": [
                "ConsistencyLevel"
            ]
        },
        "CorsRuleDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AllowedHeaders": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of headers that are allowed to be a part of the cross-origin request."
                },
                "AllowedMethods": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of http headers that are allowed to be executed by the origin. Valid options are  `DELETE`, `GET`, `HEAD`, `MERGE`, `POST`, `OPTIONS`, `PUT` or `PATCH`."
                },
                "AllowedOrigins": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of origin domains that will be allowed by CORS."
                },
                "ExposedHeaders": {
                    "type": "array",
                    "insertionOrder": false,
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of response headers that are exposed to CORS clients."
                },
                "MaxAgeInSeconds": {
                    "type": "number",
                    "description": "The number of seconds the client should cache a preflight response."
                }
            },
            "required": [
                "AllowedHeaders",
                "AllowedMethods",
                "AllowedOrigins",
                "ExposedHeaders",
                "MaxAgeInSeconds"
            ]
        },
        "GeoLocationDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "FailoverPriority": {
                    "type": "number",
                    "description": "The failover priority of the region. A failover priority of `0` indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. Changing this causes the location to be re-provisioned and cannot be changed for the location with failover priority `0`."
                },
                "Location": {
                    "type": "string",
                    "description": "The name of the Azure region to host replicated data."
                },
                "Prefix": {
                    "type": "string",
                    "description": "The string used to generate the document endpoints for this region. If not specified it defaults to `${cosmosdb_account.name}-${location}`. Changing this causes the location to be deleted and re-provisioned and cannot be changed for the location with failover priority `0`."
                },
                "ZoneRedundant": {
                    "type": "boolean",
                    "description": "Should zone redundancy be enabled for this region? Defaults to `false`."
                }
            },
            "required": [
                "FailoverPriority",
                "Location"
            ]
        },
        "IdentityDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Type": {
                    "type": "string",
                    "description": "Specifies the type of Managed Service Identity that should be configured on this Cosmos Account. Possible value is only `SystemAssigned`."
                }
            },
            "required": [
                "Type"
            ]
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Read": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        },
        "VirtualNetworkRuleDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Id": {
                    "type": "string",
                    "description": "The ID of the virtual network subnet."
                },
                "IgnoreMissingVnetServiceEndpoint": {
                    "type": "boolean",
                    "description": "If set to true, the specified subnet will be added as a virtual network rule even if its CosmosDB service endpoint is not active. Defaults to `false`."
                }
            },
            "required": [
                "Id"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AccessKeyMetadataWritesEnabled": {
            "type": "boolean",
            "description": "Is write operations on metadata resources (databases, containers, throughput) via account keys enabled? Defaults to `true`."
        },
        "AnalyticalStorageEnabled": {
            "type": "boolean",
            "description": "Enable Analytical Storage option for this Cosmos DB account. Defaults to `false`. Changing this forces a new resource to be created."
        },
        "ConnectionStrings": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            }
        },
        "EnableAutomaticFailover": {
            "type": "boolean",
            "description": "Enable automatic fail over for this Cosmos DB account."
        },
        "EnableFreeTier": {
            "type": "boolean",
            "description": "Enable Free Tier pricing option for this Cosmos DB account. Defaults to `false`. Changing this forces a new resource to be created."
        },
        "EnableMultipleWriteLocations": {
            "type": "boolean",
            "description": "Enable multi-master support for this Cosmos DB account."
        },
        "Endpoint": {
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "IpRangeFilter": {
            "type": "string",
            "description": "CosmosDB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IP's for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces."
        },
        "IsVirtualNetworkFilterEnabled": {
            "type": "boolean",
            "description": "Enables virtual network filtering for this Cosmos DB account."
        },
        "KeyVaultKeyId": {
            "type": "string",
            "description": "A versionless Key Vault Key ID for CMK encryption. Changing this forces a new resource to be created."
        },
        "Kind": {
            "type": "string",
            "description": "Specifies the Kind of CosmosDB to create - possible values are `GlobalDocumentDB` and `MongoDB`. Defaults to `GlobalDocumentDB`. Changing this forces a new resource to be created."
        },
        "Location": {
            "type": "string",
            "description": "Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created."
        },
        "MongoServerVersion": {
            "type": "string",
            "description": "The Server Version of a MongoDB account. Possible values are `4.0`, `3.6`, and `3.2`. Changing this forces a new resource to be created."
        },
        "Name": {
            "type": "string",
            "description": "Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created."
        },
        "NetworkAclBypassForAzureServices": {
            "type": "boolean",
            "description": "If azure services can bypass ACLs. Defaults to `false`."
        },
        "NetworkAclBypassIds": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "The list of resource Ids for Network Acl Bypass for this Cosmos DB account."
        },
        "OfferType": {
            "type": "string",
            "description": "Specifies the Offer Type to use for this CosmosDB Account - currently this can only be set to `Standard`."
        },
        "PrimaryKey": {
            "type": "string"
        },
        "PrimaryMasterKey": {
            "type": "string"
        },
        "PrimaryReadonlyKey": {
            "type": "string"
        },
        "PrimaryReadonlyMasterKey": {
            "type": "string"
        },
        "PublicNetworkAccessEnabled": {
            "type": "boolean",
            "description": "Whether or not public network access is allowed for this CosmosDB account."
        },
        "ReadEndpoints": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            }
        },
        "ResourceGroupName": {
            "type": "string",
            "description": "The name of the resource group in which the CosmosDB Account is created. Changing this forces a new resource to be created."
        },
        "SecondaryKey": {
            "type": "string"
        },
        "SecondaryMasterKey": {
            "type": "string"
        },
        "SecondaryReadonlyKey": {
            "type": "string"
        },
        "SecondaryReadonlyMasterKey": {
            "type": "string"
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "A mapping of tags to assign to the resource."
        },
        "WriteEndpoints": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            }
        },
        "Backup": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/BackupDefinition"
            },
            "maxItems": 1
        },
        "Capabilities": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/CapabilitiesDefinition"
            }
        },
        "ConsistencyPolicy": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/ConsistencyPolicyDefinition"
            },
            "maxItems": 1,
            "minItems": 1
        },
        "CorsRule": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/CorsRuleDefinition"
            },
            "maxItems": 1
        },
        "GeoLocation": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/GeoLocationDefinition"
            },
            "minItems": 1
        },
        "Identity": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/IdentityDefinition"
            },
            "maxItems": 1
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        },
        "VirtualNetworkRule": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/VirtualNetworkRuleDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "Location",
        "Name",
        "OfferType",
        "ResourceGroupName"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/ConnectionStrings",
        "/properties/Endpoint",
        "/properties/Id",
        "/properties/PrimaryKey",
        "/properties/PrimaryMasterKey",
        "/properties/PrimaryReadonlyKey",
        "/properties/PrimaryReadonlyMasterKey",
        "/properties/ReadEndpoints",
        "/properties/SecondaryKey",
        "/properties/SecondaryMasterKey",
        "/properties/SecondaryReadonlyKey",
        "/properties/SecondaryReadonlyMasterKey",
        "/properties/WriteEndpoints"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/properties/ConnectionStrings",
        "/properties/PrimaryKey",
        "/properties/PrimaryMasterKey",
        "/properties/PrimaryReadonlyKey",
        "/properties/PrimaryReadonlyMasterKey",
        "/properties/SecondaryKey",
        "/properties/SecondaryMasterKey",
        "/properties/SecondaryReadonlyKey",
        "/properties/SecondaryReadonlyMasterKey"
    ]
}