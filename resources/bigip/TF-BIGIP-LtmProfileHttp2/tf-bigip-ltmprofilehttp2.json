{
    "typeName": "TF::BIGIP::LtmProfileHttp2",
    "description": "`bigip_ltm_profile_http2` Configures a custom profile_http2 for use by health checks.\n\nFor resources should be named with their \"full path\". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/bigip/TF-BIGIP-LtmProfileHttp2/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "ActivationModes": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[\u201calpn\u201d]` (or) `[\u201calways\u201d]`."
        },
        "ConcurrentStreamsPerConnection": {
            "type": "number",
            "description": "Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection."
        },
        "ConnectionIdleTimeout": {
            "type": "number",
            "description": "Specifies the number of seconds that a connection is idle before the connection is eligible for deletion."
        },
        "DefaultsFrom": {
            "type": "string",
            "description": "Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified."
        },
        "EnforceTlsRequirements": {
            "type": "string",
            "description": "Enable or disable enforcement of TLS requirements,Allowed Values : `\"enabled\"/\"disabled\"` [Default:`\"enabled\"`]."
        },
        "FrameSize": {
            "type": "number",
            "description": "The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`."
        },
        "HeaderTableSize": {
            "type": "number",
            "description": "The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth."
        },
        "Id": {
            "type": "string"
        },
        "IncludeContentLength": {
            "type": "string"
        },
        "InsertHeader": {
            "type": "string",
            "description": "This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `\"enabled\"/\"disabled\"` [ Default: `\"disabled\"`]."
        },
        "InsertHeaderName": {
            "type": "string",
            "description": "This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled."
        },
        "Name": {
            "type": "string"
        },
        "ReceiveWindow": {
            "type": "number",
            "description": "The flow-control size for upload streams, in KB. `Default: 32`."
        },
        "WriteSize": {
            "type": "number",
            "description": "The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`\"."
        }
    },
    "additionalProperties": false,
    "required": [
        "Name"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}