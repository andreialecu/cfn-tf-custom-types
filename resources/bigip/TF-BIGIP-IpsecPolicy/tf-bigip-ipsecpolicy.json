{
    "typeName": "TF::BIGIP::IpsecPolicy",
    "description": "`bigip_ipsec_policy` Manage IPSec policies on a BIG-IP\n\nResources should be named with their \"full path\". The full path is the combination of the partition + name (example: /Common/test-policy)",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/bigip/TF-BIGIP-IpsecPolicy/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AuthAlgorithm": {
            "type": "string",
            "description": "Specifies the algorithm to use for IKE authentication. Valid choices are: `sha1, sha256, sha384, sha512, aes-gcm128,\naes-gcm192, aes-gcm256, aes-gmac128, aes-gmac192, aes-gmac256`."
        },
        "Description": {
            "type": "string",
            "description": "Description of the IPSec policy."
        },
        "EncryptAlgorithm": {
            "type": "string",
            "description": "Specifies the algorithm to use for IKE encryption. Valid choices are: `null, 3des, aes128, aes192, aes256, aes-gmac256,\naes-gmac192, aes-gmac128, aes-gcm256, aes-gcm192, aes-gcm256, aes-gcm128`."
        },
        "Id": {
            "type": "string"
        },
        "Ipcomp": {
            "type": "string",
            "description": "Specifies whether to use IPComp encapsulation. Valid choices are: `none\", null\", deflate`."
        },
        "KbLifetime": {
            "type": "number",
            "description": "Specifies the length of time before the IKE security association expires, in kilobytes."
        },
        "Lifetime": {
            "type": "number",
            "description": "Specifies the length of time before the IKE security association expires, in minutes."
        },
        "Mode": {
            "type": "string",
            "description": "Specifies the processing mode. Valid choices are: `transport, interface, isession, tunnel`."
        },
        "Name": {
            "type": "string",
            "description": "Name of the IPSec policy,it should be \"full path\".The full path is the combination of the partition + name of the IPSec policy.(For example `/Common/test-policy`)."
        },
        "PerfectForwardSecrecy": {
            "type": "string",
            "description": "Specifies the Diffie-Hellman group to use for IKE Phase 2 negotiation. Valid choices are: `none, modp768, modp1024, modp1536, modp2048, modp3072,\nmodp4096, modp6144, modp8192`."
        },
        "Protocol": {
            "type": "string",
            "description": "Specifies the IPsec protocol. Valid choices are: `ah, esp`."
        },
        "TunnelLocalAddress": {
            "type": "string",
            "description": "Specifies the local endpoint IP address of the IPsec tunnel. This parameter is only valid when mode is tunnel."
        },
        "TunnelRemoteAddress": {
            "type": "string",
            "description": "Specifies the remote endpoint IP address of the IPsec tunnel. This parameter is only valid when mode is tunnel."
        }
    },
    "additionalProperties": false,
    "required": [
        "Name"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}