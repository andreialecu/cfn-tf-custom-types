{
    "typeName": "TF::Okta::PolicyPassword",
    "description": "Creates a Password Policy.\n\nThis resource allows you to create and configure a Password Policy.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/okta/TF-Okta-PolicyPassword/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AuthProvider": {
            "type": "string",
            "description": "Authentication Provider: `\"OKTA\"` or `\"ACTIVE_DIRECTORY\"`. Default is `\"OKTA\"`."
        },
        "CallRecovery": {
            "type": "string",
            "description": "Enable or disable voice call password recovery: ACTIVE or INACTIVE."
        },
        "Description": {
            "type": "string",
            "description": "Policy Description."
        },
        "EmailRecovery": {
            "type": "string",
            "description": "Enable or disable email password recovery: ACTIVE or INACTIVE."
        },
        "GroupsIncluded": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "List of Group IDs to Include."
        },
        "Id": {
            "type": "string"
        },
        "Name": {
            "type": "string",
            "description": "Policy Name."
        },
        "PasswordAutoUnlockMinutes": {
            "type": "number",
            "description": "Number of minutes before a locked account is unlocked: 0 = no limit."
        },
        "PasswordDictionaryLookup": {
            "type": "boolean",
            "description": "Check Passwords Against Common Password Dictionary."
        },
        "PasswordExcludeFirstName": {
            "type": "boolean",
            "description": "User firstName attribute must be excluded from the password."
        },
        "PasswordExcludeLastName": {
            "type": "boolean",
            "description": "User lastName attribute must be excluded from the password."
        },
        "PasswordExcludeUsername": {
            "type": "boolean",
            "description": "If the username must be excluded from the password."
        },
        "PasswordExpireWarnDays": {
            "type": "number",
            "description": "Length in days a user will be warned before password expiry: 0 = no warning."
        },
        "PasswordHistoryCount": {
            "type": "number",
            "description": "Number of distinct passwords that must be created before they can be reused: 0 = none."
        },
        "PasswordLockoutNotificationChannels": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "Notification channels to use to notify a user when their account has been locked."
        },
        "PasswordMaxAgeDays": {
            "type": "number",
            "description": "Length in days a password is valid before expiry: 0 = no limit.,."
        },
        "PasswordMaxLockoutAttempts": {
            "type": "number",
            "description": "Number of unsuccessful login attempts allowed before lockout: 0 = no limit."
        },
        "PasswordMinAgeMinutes": {
            "type": "number",
            "description": "Minimum time interval in minutes between password changes: 0 = no limit."
        },
        "PasswordMinLength": {
            "type": "number",
            "description": "Minimum password length. Default is 8."
        },
        "PasswordMinLowercase": {
            "type": "number",
            "description": "Minimum number of lower case characters in a password."
        },
        "PasswordMinNumber": {
            "type": "number",
            "description": "Minimum number of numbers in a password."
        },
        "PasswordMinSymbol": {
            "type": "number",
            "description": "Minimum number of symbols in a password."
        },
        "PasswordMinUppercase": {
            "type": "number",
            "description": "Minimum number of upper case characters in a password."
        },
        "PasswordShowLockoutFailures": {
            "type": "boolean",
            "description": "If a user should be informed when their account is locked."
        },
        "Priority": {
            "type": "number",
            "description": "Priority of the policy."
        },
        "QuestionMinLength": {
            "type": "number",
            "description": "Min length of the password recovery question answer."
        },
        "QuestionRecovery": {
            "type": "string",
            "description": "Enable or disable security question password recovery: ACTIVE or INACTIVE."
        },
        "RecoveryEmailToken": {
            "type": "number",
            "description": "Lifetime in minutes of the recovery email token."
        },
        "SkipUnlock": {
            "type": "boolean",
            "description": "When an Active Directory user is locked out of Okta, the Okta unlock operation should also attempt to unlock the user's Windows account."
        },
        "SmsRecovery": {
            "type": "string",
            "description": "Enable or disable SMS password recovery: ACTIVE or INACTIVE."
        },
        "Status": {
            "type": "string",
            "description": "Policy Status: `\"ACTIVE\"` or `\"INACTIVE\"`."
        }
    },
    "additionalProperties": false,
    "required": [
        "Name"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}