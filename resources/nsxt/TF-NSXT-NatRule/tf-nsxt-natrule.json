{
    "typeName": "TF::NSXT::NatRule",
    "description": "This resource provides a means to configure a NAT rule in NSX. NAT provides network address translation between one IP address space and another IP address space. NAT rules can be destination NAT or source NAT rules.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/nsxt/TF-NSXT-NatRule/docs/README.md",
    "definitions": {
        "TagDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Scope": {
                    "type": "string"
                },
                "Tag": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Action": {
            "type": "string",
            "description": "NAT rule action type. Valid actions are: SNAT, DNAT, NO_NAT and REFLEXIVE. All rules in a logical router are either stateless or stateful. Mix is not supported. SNAT and DNAT are stateful, and can NOT be supported when the logical router is running at active-active HA mode. The REFLEXIVE action is stateless. The NO_NAT action has no translated_fields, only match fields."
        },
        "Description": {
            "type": "string",
            "description": "Description of this resource."
        },
        "DisplayName": {
            "type": "string",
            "description": "The display name of this resource. Defaults to ID if not set."
        },
        "Enabled": {
            "type": "boolean",
            "description": "enable/disable the rule."
        },
        "Id": {
            "type": "string"
        },
        "Logging": {
            "type": "boolean",
            "description": "enable/disable the logging of rule."
        },
        "LogicalRouterId": {
            "type": "string",
            "description": "ID of the logical router."
        },
        "MatchDestinationNetwork": {
            "type": "string",
            "description": "IP Address | CIDR. Omitting this field implies Any."
        },
        "MatchSourceNetwork": {
            "type": "string",
            "description": "IP Address | CIDR. Omitting this field implies Any."
        },
        "NatPass": {
            "type": "boolean",
            "description": "Enable/disable to bypass following firewall stage. The default is true, meaning that the following firewall stage will be skipped. Please note, if action is NO_NAT, then nat_pass must be set to true or omitted."
        },
        "Revision": {
            "type": "number"
        },
        "RulePriority": {
            "type": "number",
            "description": "The priority of the rule which is ascending, valid range [0-2147483647]. If multiple rules have the same priority, evaluation sequence is undefined."
        },
        "TranslatedNetwork": {
            "type": "string",
            "description": "IP Address | IP Range | CIDR."
        },
        "TranslatedPorts": {
            "type": "string",
            "description": "port number or port range. Allowed only when action=DNAT."
        },
        "Tag": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "Action",
        "LogicalRouterId"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/Revision"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}