{
    "typeName": "TF::DigitalOcean::SpacesBucketObject",
    "description": "Provides a bucket object resource for Spaces, DigitalOcean's object storage product.\nThe `digitalocean_spaces_bucket_object` resource allows Terraform to upload content\nto Spaces.\n\nThe [Spaces API](https://developers.digitalocean.com/documentation/spaces/) was\ndesigned to be interoperable with Amazon's AWS S3 API. This allows users to\ninteract with the service while using the tools they already know. Spaces\nmirrors S3's authentication framework and requests to Spaces require a key pair\nsimilar to Amazon's Access ID and Secret Key.\n\nThe authentication requirement can be met by either setting the\n`SPACES_ACCESS_KEY_ID` and `SPACES_SECRET_ACCESS_KEY` environment variables or\nthe provider's `spaces_access_id` and `spaces_secret_key` arguments to the\naccess ID and secret you generate via the DigitalOcean control panel. For\nexample:\n\n```\nprovider \"digitalocean\" {\n  token             = var.digitalocean_token\n\n  spaces_access_id  = var.access_id\n  spaces_secret_key = var.secret_key\n}\n\nresource \"digitalocean_space...",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/digitalocean/TF-DigitalOcean-SpacesBucketObject/docs/README.md",
    "definitions": {
        "MetadataDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Acl": {
            "type": "string",
            "description": "The canned ACL to apply. DigitalOcean supports \"private\" and \"public-read\". (Defaults to \"private\".)."
        },
        "Bucket": {
            "type": "string",
            "description": "The name of the bucket to put the file in."
        },
        "CacheControl": {
            "type": "string",
            "description": "Specifies caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details."
        },
        "Content": {
            "type": "string",
            "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text."
        },
        "ContentBase64": {
            "type": "string",
            "description": "Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file."
        },
        "ContentDisposition": {
            "type": "string",
            "description": "Specifies presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information."
        },
        "ContentEncoding": {
            "type": "string",
            "description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information."
        },
        "ContentLanguage": {
            "type": "string",
            "description": "The language the content is in e.g. en-US or en-GB."
        },
        "ContentType": {
            "type": "string",
            "description": "A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input."
        },
        "Etag": {
            "type": "string",
            "description": "Used to trigger updates. The only meaningful value is `${filemd5(\"path/to/file\")}` (Terraform 0.11.12 or later) or `${md5(file(\"path/to/file\"))}` (Terraform 0.11.11 or earlier)."
        },
        "ForceDestroy": {
            "type": "boolean",
            "description": "Allow the object to be deleted by removing any legal hold on any object version.\nDefault is `false`. This value should be set to `true` only if the bucket has S3 object lock enabled."
        },
        "Id": {
            "type": "string"
        },
        "Key": {
            "type": "string",
            "description": "The name of the object once it is in the bucket."
        },
        "Metadata": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/MetadataDefinition"
            },
            "description": "A mapping of keys/values to provision metadata (will be automatically prefixed by `x-amz-meta-`, note that only lowercase label are currently supported by the AWS Go API)."
        },
        "Region": {
            "type": "string",
            "description": "The region where the bucket resides (Defaults to `nyc3`)."
        },
        "Source": {
            "type": "string",
            "description": "The path to a file that will be read and uploaded as raw bytes for the object content."
        },
        "VersionId": {
            "type": "string"
        },
        "WebsiteRedirect": {
            "type": "string",
            "description": "Specifies a target URL for [website redirect](http://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html)."
        }
    },
    "additionalProperties": false,
    "required": [
        "Bucket",
        "Key",
        "Region"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/VersionId"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}