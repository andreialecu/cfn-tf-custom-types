{
    "typeName": "TF::AVI::Jwtserverprofile",
    "description": "The JWTServerProfile resource allows the creation and management of Avi JWTServerProfile",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/avi/TF-AVI-Jwtserverprofile/docs/README.md",
    "definitions": {
        "ControllerInternalAuthDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "SymmetricJwksKeys": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/SymmetricJwksKeysDefinition"
                    },
                    "minItems": 1
                }
            },
            "required": []
        },
        "SymmetricJwksKeysDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Alg": {
                    "type": "string"
                },
                "Key": {
                    "type": "string"
                },
                "Kid": {
                    "type": "string"
                },
                "Kty": {
                    "type": "string"
                }
            },
            "required": [
                "Key",
                "Kid"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "IsFederated": {
            "type": "boolean",
            "description": "This field describes the object's replication scope. If the field is set to false, then the object is visible within the controller-cluster. If the field is set to true, then the object is replicated across the federation. Field introduced in 20.1.6."
        },
        "Issuer": {
            "type": "string",
            "description": "Uniquely identifiable name of the token issuer, only allowed with profile_type client_auth. Field introduced in 20.1.3."
        },
        "JwksKeys": {
            "type": "string",
            "description": "Jwks key set used for validating the jwt, only allowed with profile_type client_auth. Field introduced in 20.1.3."
        },
        "JwtProfileType": {
            "type": "string",
            "description": "Type of jwt server profile which defines the usage type. Enum options - CLIENT_AUTH, CONTROLLER_INTERNAL_AUTH. Field introduced in 20.1.6."
        },
        "Name": {
            "type": "string",
            "description": "Name of the jwt profile. Field introduced in 20.1.3."
        },
        "TenantRef": {
            "type": "string",
            "description": "Uuid of the tenant. It is a reference to an object of type tenant. Field introduced in 20.1.3."
        },
        "Uuid": {
            "type": "string"
        },
        "ControllerInternalAuth": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/ControllerInternalAuthDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "Name"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/definitions/SymmetricJwksKeysDefinition/Key"
    ]
}