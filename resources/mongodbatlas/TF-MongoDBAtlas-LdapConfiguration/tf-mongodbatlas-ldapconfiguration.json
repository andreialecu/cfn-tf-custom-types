{
    "typeName": "TF::MongoDBAtlas::LdapConfiguration",
    "description": "`mongodbatlas_ldap_configuration` provides an LDAP Configuration resource. This allows an LDAP configuration for an Atlas project to be crated and managed. This endpoint doesn\u2019t verify connectivity using the provided LDAP over TLS configuration details. To verify a configuration before saving it, use the resource to [verify](https://github.com/mongodb/terraform-provider-mongodbatlas/blob/INTMDB-114/website/docs/r/ldap_verify.html.markdown) the LDAP configuration.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/mongodbatlas/TF-MongoDBAtlas-LdapConfiguration/docs/README.md",
    "definitions": {
        "UserToDnMappingDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "LdapQuery": {
                    "type": "string"
                },
                "Match": {
                    "type": "string"
                },
                "Substitution": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AuthenticationEnabled": {
            "type": "boolean",
            "description": "Specifies whether user authentication with LDAP is enabled."
        },
        "AuthorizationEnabled": {
            "type": "boolean",
            "description": "Specifies whether user authorization with LDAP is enabled. You cannot enable user authorization with LDAP without first enabling user authentication with LDAP."
        },
        "AuthzQueryTemplate": {
            "type": "string",
            "description": "An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`."
        },
        "BindPassword": {
            "type": "string",
            "description": "The password used to authenticate the `bind_username`."
        },
        "BindUsername": {
            "type": "string",
            "description": "The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`."
        },
        "CaCertificate": {
            "type": "string",
            "description": "CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed."
        },
        "Hostname": {
            "type": "string",
            "description": "The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering."
        },
        "Id": {
            "type": "string"
        },
        "Port": {
            "type": "number",
            "description": "The port to which the LDAP server listens for client connections. Default: `636`."
        },
        "ProjectId": {
            "type": "string",
            "description": "The unique ID for the project to configure LDAP."
        },
        "UserToDnMapping": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/UserToDnMappingDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "AuthenticationEnabled",
        "BindPassword",
        "BindUsername",
        "Hostname",
        "ProjectId"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/properties/BindPassword"
    ]
}