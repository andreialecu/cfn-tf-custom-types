{
    "typeName": "TF::AWS::EcsService",
    "description": "-> **Note:** To prevent a race condition during service deletion, make sure to set `depends_on` to the related `aws_iam_role_policy`; otherwise, the policy may be destroyed too soon and the ECS service will then get stuck in the `DRAINING` state.\n\nProvides an ECS service - effectively a task that is expected to run until an error occurs or a user terminates it (typically a webserver or a database).\n\nSee [ECS Services section in AWS developer guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/aws/TF-AWS-EcsService/docs/README.md",
    "definitions": {
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "TagsAllDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "CapacityProviderStrategyDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Base": {
                    "type": "number"
                },
                "CapacityProvider": {
                    "type": "string"
                },
                "Weight": {
                    "type": "number"
                }
            },
            "required": [
                "CapacityProvider"
            ]
        },
        "DeploymentCircuitBreakerDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Enable": {
                    "type": "boolean"
                },
                "Rollback": {
                    "type": "boolean"
                }
            },
            "required": [
                "Enable",
                "Rollback"
            ]
        },
        "DeploymentControllerDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Type": {
                    "type": "string"
                }
            },
            "required": []
        },
        "LoadBalancerDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "ContainerName": {
                    "type": "string"
                },
                "ContainerPort": {
                    "type": "number"
                },
                "ElbName": {
                    "type": "string"
                },
                "TargetGroupArn": {
                    "type": "string"
                }
            },
            "required": [
                "ContainerName",
                "ContainerPort"
            ]
        },
        "NetworkConfigurationDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AssignPublicIp": {
                    "type": "boolean"
                },
                "SecurityGroups": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    }
                },
                "Subnets": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "Subnets"
            ]
        },
        "OrderedPlacementStrategyDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Field": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                }
            },
            "required": [
                "Type"
            ]
        },
        "PlacementConstraintsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Expression": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                }
            },
            "required": [
                "Type"
            ]
        },
        "ServiceRegistriesDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "ContainerName": {
                    "type": "string"
                },
                "ContainerPort": {
                    "type": "number"
                },
                "Port": {
                    "type": "number"
                },
                "RegistryArn": {
                    "type": "string"
                }
            },
            "required": [
                "RegistryArn"
            ]
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Delete": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Cluster": {
            "type": "string",
            "description": "ARN of an ECS cluster."
        },
        "DeploymentMaximumPercent": {
            "type": "number",
            "description": "Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy."
        },
        "DeploymentMinimumHealthyPercent": {
            "type": "number",
            "description": "Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment."
        },
        "DesiredCount": {
            "type": "number",
            "description": "Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy."
        },
        "EnableEcsManagedTags": {
            "type": "boolean",
            "description": "Specifies whether to enable Amazon ECS managed tags for the tasks within the service."
        },
        "EnableExecuteCommand": {
            "type": "boolean",
            "description": "Specifies whether to enable Amazon ECS Exec for the tasks within the service."
        },
        "ForceNewDeployment": {
            "type": "boolean",
            "description": "Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g. `myimage:latest`), roll Fargate tasks onto a newer platform version, or immediately deploy `ordered_placement_strategy` and `placement_constraints` updates."
        },
        "HealthCheckGracePeriodSeconds": {
            "type": "number",
            "description": "Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers."
        },
        "IamRole": {
            "type": "string",
            "description": "ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here."
        },
        "Id": {
            "type": "string"
        },
        "LaunchType": {
            "type": "string",
            "description": "Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`."
        },
        "Name": {
            "type": "string",
            "description": "Name of the service (up to 255 letters, numbers, hyphens, and underscores)."
        },
        "PlatformVersion": {
            "type": "string",
            "description": "Platform version on which to run your service. Only applicable for `launch_type` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)."
        },
        "PropagateTags": {
            "type": "string",
            "description": "Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`."
        },
        "SchedulingStrategy": {
            "type": "string",
            "description": "Scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html)."
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level."
        },
        "TagsAll": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsAllDefinition"
            }
        },
        "TaskDefinition": {
            "type": "string",
            "description": "Family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service. Required unless using the `EXTERNAL` deployment controller. If a revision is not specified, the latest `ACTIVE` revision is used."
        },
        "WaitForSteadyState": {
            "type": "boolean",
            "description": "If `true`, Terraform will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`."
        },
        "CapacityProviderStrategy": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/CapacityProviderStrategyDefinition"
            }
        },
        "DeploymentCircuitBreaker": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/DeploymentCircuitBreakerDefinition"
            },
            "maxItems": 1
        },
        "DeploymentController": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/DeploymentControllerDefinition"
            },
            "maxItems": 1
        },
        "LoadBalancer": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/LoadBalancerDefinition"
            }
        },
        "NetworkConfiguration": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/NetworkConfigurationDefinition"
            },
            "maxItems": 1
        },
        "OrderedPlacementStrategy": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/OrderedPlacementStrategyDefinition"
            },
            "maxItems": 5
        },
        "PlacementConstraints": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/PlacementConstraintsDefinition"
            },
            "maxItems": 10
        },
        "ServiceRegistries": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/ServiceRegistriesDefinition"
            },
            "maxItems": 1
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [
        "Name"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}