{
    "typeName": "TF::AWS::S3BucketNotification",
    "description": "Manages a S3 Bucket Notification Configuration. For additional information, see the [Configuring S3 Event Notifications section in the Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).\n\n~> **NOTE:** S3 Buckets only support a single notification configuration. Declaring multiple `aws_s3_bucket_notification` resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example \"Trigger multiple Lambda functions\" for an option.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/aws/TF-AWS-S3BucketNotification/docs/README.md",
    "definitions": {
        "LambdaFunctionDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Events": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications."
                },
                "FilterPrefix": {
                    "type": "string",
                    "description": "Specifies object key name prefix."
                },
                "FilterSuffix": {
                    "type": "string",
                    "description": "Specifies object key name suffix."
                },
                "Id": {
                    "type": "string",
                    "description": "Specifies unique identifier for each of the notification configurations."
                },
                "LambdaFunctionArn": {
                    "type": "string",
                    "description": "Specifies Amazon Lambda function ARN."
                }
            },
            "required": [
                "Events"
            ]
        },
        "QueueDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Events": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications."
                },
                "FilterPrefix": {
                    "type": "string",
                    "description": "Specifies object key name prefix."
                },
                "FilterSuffix": {
                    "type": "string",
                    "description": "Specifies object key name suffix."
                },
                "Id": {
                    "type": "string",
                    "description": "Specifies unique identifier for each of the notification configurations."
                },
                "QueueArn": {
                    "type": "string",
                    "description": "Specifies Amazon SQS queue ARN."
                }
            },
            "required": [
                "Events",
                "QueueArn"
            ]
        },
        "TopicDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Events": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications."
                },
                "FilterPrefix": {
                    "type": "string",
                    "description": "Specifies object key name prefix."
                },
                "FilterSuffix": {
                    "type": "string",
                    "description": "Specifies object key name suffix."
                },
                "Id": {
                    "type": "string",
                    "description": "Specifies unique identifier for each of the notification configurations."
                },
                "TopicArn": {
                    "type": "string",
                    "description": "Specifies Amazon SNS topic ARN."
                }
            },
            "required": [
                "Events",
                "TopicArn"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Bucket": {
            "type": "string",
            "description": "The name of the bucket to put notification configuration."
        },
        "Id": {
            "type": "string"
        },
        "LambdaFunction": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/LambdaFunctionDefinition"
            }
        },
        "Queue": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/QueueDefinition"
            }
        },
        "Topic": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/TopicDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "Bucket"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}