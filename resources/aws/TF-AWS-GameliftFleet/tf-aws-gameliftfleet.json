{
    "typeName": "TF::AWS::GameliftFleet",
    "description": "Provides a Gamelift Fleet resource.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/aws/TF-AWS-GameliftFleet/docs/README.md",
    "definitions": {
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "TagsAllDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "Ec2InboundPermissionDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "FromPort": {
                    "type": "number"
                },
                "IpRange": {
                    "type": "string"
                },
                "Protocol": {
                    "type": "string"
                },
                "ToPort": {
                    "type": "number"
                }
            },
            "required": [
                "FromPort",
                "IpRange",
                "Protocol",
                "ToPort"
            ]
        },
        "ResourceCreationLimitPolicyDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "NewGameSessionsPerCreator": {
                    "type": "number"
                },
                "PolicyPeriodInMinutes": {
                    "type": "number"
                }
            },
            "required": []
        },
        "RuntimeConfigurationDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "GameSessionActivationTimeoutSeconds": {
                    "type": "number"
                },
                "MaxConcurrentGameSessionActivations": {
                    "type": "number"
                },
                "ServerProcess": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/ServerProcessDefinition"
                    },
                    "maxItems": 50
                }
            },
            "required": []
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                }
            },
            "required": []
        },
        "ServerProcessDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "ConcurrentExecutions": {
                    "type": "number"
                },
                "LaunchPath": {
                    "type": "string"
                },
                "Parameters": {
                    "type": "string"
                }
            },
            "required": [
                "ConcurrentExecutions",
                "LaunchPath"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Arn": {
            "type": "string"
        },
        "BuildId": {
            "type": "string",
            "description": "ID of the Gamelift Build to be deployed on the fleet."
        },
        "Description": {
            "type": "string",
            "description": "Human-readable description of the fleet."
        },
        "Ec2InstanceType": {
            "type": "string",
            "description": "Name of an EC2 instance type. e.g. `t2.micro`."
        },
        "FleetType": {
            "type": "string",
            "description": "Type of fleet. This value must be `ON_DEMAND` or `SPOT`. Defaults to `ON_DEMAND`."
        },
        "Id": {
            "type": "string"
        },
        "InstanceRoleArn": {
            "type": "string",
            "description": "ARN of an IAM role that instances in the fleet can assume."
        },
        "LogPaths": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            }
        },
        "MetricGroups": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`."
        },
        "Name": {
            "type": "string",
            "description": "The name of the fleet."
        },
        "NewGameSessionProtectionPolicy": {
            "type": "string",
            "description": "Game session protection policy to apply to all instances in this fleet. e.g. `FullProtection`. Defaults to `NoProtection`."
        },
        "OperatingSystem": {
            "type": "string"
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level."
        },
        "TagsAll": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsAllDefinition"
            }
        },
        "Ec2InboundPermission": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/Ec2InboundPermissionDefinition"
            },
            "maxItems": 50
        },
        "ResourceCreationLimitPolicy": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/ResourceCreationLimitPolicyDefinition"
            },
            "maxItems": 1
        },
        "RuntimeConfiguration": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/RuntimeConfigurationDefinition"
            },
            "maxItems": 1
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [
        "BuildId",
        "Ec2InstanceType",
        "Name"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Arn",
        "/properties/Id",
        "/properties/LogPaths",
        "/properties/OperatingSystem"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}