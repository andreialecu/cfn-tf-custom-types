{
    "typeName": "TF::AWS::DocdbCluster",
    "description": "Manages a DocDB Cluster.\n\nChanges to a DocDB Cluster can occur when you manually change a\nparameter, such as `port`, and are reflected in the next maintenance\nwindow. Because of this, Terraform may report a difference in its planning\nphase because a modification has not yet taken place. You can use the\n`apply_immediately` flag to instruct the service to apply the change immediately\n(see documentation below).\n\n~> **Note:** using `apply_immediately` can result in a brief downtime as the server reboots.\n~> **Note:** All arguments including the username and password will be stored in the raw state as plain-text.\n[Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/aws/TF-AWS-DocdbCluster/docs/README.md",
    "definitions": {
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "TagsAllDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "TimeoutsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "ApplyImmediately": {
            "type": "boolean",
            "description": "Specifies whether any cluster modifications\nare applied immediately, or during the next maintenance window. Default is\n`false`."
        },
        "Arn": {
            "type": "string"
        },
        "AvailabilityZones": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "A list of EC2 Availability Zones that\ninstances in the DB cluster can be created in."
        },
        "BackupRetentionPeriod": {
            "type": "number",
            "description": "The days to retain backups for. Default `1`."
        },
        "ClusterIdentifier": {
            "type": "string",
            "description": "The cluster identifier. If omitted, Terraform will assign a random, unique identifier."
        },
        "ClusterIdentifierPrefix": {
            "type": "string",
            "description": "Creates a unique cluster identifier beginning with the specified prefix. Conflicts with `cluster_identifier`."
        },
        "ClusterMembers": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            }
        },
        "ClusterResourceId": {
            "type": "string"
        },
        "DbClusterParameterGroupName": {
            "type": "string",
            "description": "A cluster parameter group to associate with the cluster."
        },
        "DbSubnetGroupName": {
            "type": "string",
            "description": "A DB subnet group to associate with this DB instance."
        },
        "DeletionProtection": {
            "type": "boolean",
            "description": "A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled."
        },
        "EnabledCloudwatchLogsExports": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "List of log types to export to cloudwatch. If omitted, no logs will be exported.\nThe following log types are supported: `audit`, `profiler`."
        },
        "Endpoint": {
            "type": "string"
        },
        "Engine": {
            "type": "string",
            "description": "The name of the database engine to be used for this DB cluster. Defaults to `docdb`. Valid Values: `docdb`."
        },
        "EngineVersion": {
            "type": "string",
            "description": "The database engine version. Updating this argument results in an outage."
        },
        "FinalSnapshotIdentifier": {
            "type": "string",
            "description": "The name of your final DB snapshot\nwhen this DB cluster is deleted. If omitted, no final snapshot will be\nmade."
        },
        "HostedZoneId": {
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "KmsKeyId": {
            "type": "string",
            "description": "The ARN for the KMS encryption key. When specifying `kms_key_id`, `storage_encrypted` needs to be set to true."
        },
        "MasterPassword": {
            "type": "string",
            "description": "Password for the master DB user. Note that this may\nshow up in logs, and it will be stored in the state file. Please refer to the DocDB Naming Constraints."
        },
        "MasterUsername": {
            "type": "string",
            "description": "Username for the master DB user."
        },
        "Port": {
            "type": "number",
            "description": "The port on which the DB accepts connections."
        },
        "PreferredBackupWindow": {
            "type": "string",
            "description": "The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.Time in UTC\nDefault: A 30-minute window selected at random from an 8-hour block of time per region. e.g. 04:00-09:00."
        },
        "PreferredMaintenanceWindow": {
            "type": "string",
            "description": "The weekly time range during which system maintenance can occur, in (UTC) e.g. wed:04:00-wed:04:30."
        },
        "ReaderEndpoint": {
            "type": "string"
        },
        "SkipFinalSnapshot": {
            "type": "boolean",
            "description": "Determines whether a final DB snapshot is created before the DB cluster is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted, using the value from `final_snapshot_identifier`. Default is `false`."
        },
        "SnapshotIdentifier": {
            "type": "string",
            "description": "Specifies whether or not to create this cluster from a snapshot. You can use either the name or ARN when specifying a DB cluster snapshot, or the ARN when specifying a DB snapshot."
        },
        "StorageEncrypted": {
            "type": "boolean",
            "description": "Specifies whether the DB cluster is encrypted. The default is `false`."
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "A map of tags to assign to the DB cluster. If configured with a provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level."
        },
        "TagsAll": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsAllDefinition"
            }
        },
        "VpcSecurityGroupIds": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "List of VPC security groups to associate\nwith the Cluster."
        },
        "Timeouts": {
            "$ref": "#/definitions/TimeoutsDefinition"
        }
    },
    "additionalProperties": false,
    "required": [],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Arn",
        "/properties/ClusterResourceId",
        "/properties/Endpoint",
        "/properties/HostedZoneId",
        "/properties/Id",
        "/properties/ReaderEndpoint"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/properties/MasterPassword"
    ]
}