{
    "typeName": "TF::AWS::ServicecatalogProvisioningArtifact",
    "description": "Manages a Service Catalog Provisioning Artifact for a specified product.\n\n-> A \"provisioning artifact\" is also referred to as a \"version.\"\n\n~> **NOTE:** You cannot create a provisioning artifact for a product that was shared with you.\n\n~> **NOTE:** The user or role that use this resource must have the `cloudformation:GetTemplate` IAM policy permission. This policy permission is required when using the `template_physical_id` argument.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/aws/TF-AWS-ServicecatalogProvisioningArtifact/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AcceptLanguage": {
            "type": "string",
            "description": "Language code. Valid values: `en` (English), `jp` (Japanese), `zh` (Chinese). The default value is `en`."
        },
        "Active": {
            "type": "boolean",
            "description": "Whether the product version is active. Inactive provisioning artifacts are invisible to end users. End users cannot launch or update a provisioned product from an inactive provisioning artifact. Default is `true`."
        },
        "CreatedTime": {
            "type": "string"
        },
        "Description": {
            "type": "string",
            "description": "Description of the provisioning artifact (i.e., version), including how it differs from the previous provisioning artifact."
        },
        "DisableTemplateValidation": {
            "type": "boolean",
            "description": "Whether AWS Service Catalog stops validating the specified provisioning artifact template even if it is invalid."
        },
        "Guidance": {
            "type": "string",
            "description": "Information set by the administrator to provide guidance to end users about which provisioning artifacts to use. Valid values are `DEFAULT` and `DEPRECATED`. The default is `DEFAULT`. Users are able to make updates to a provisioned product of a deprecated version but cannot launch new provisioned products using a deprecated version."
        },
        "Id": {
            "type": "string"
        },
        "Name": {
            "type": "string",
            "description": "Name of the provisioning artifact (for example, `v1`, `v2beta`). No spaces are allowed."
        },
        "ProductId": {
            "type": "string",
            "description": "Identifier of the product."
        },
        "TemplatePhysicalId": {
            "type": "string",
            "description": "Template source as the physical ID of the resource that contains the template. Currently only supports CloudFormation stack ARN. Specify the physical ID as `arn:[partition]:cloudformation:[region]:[account ID]:stack/[stack name]/[resource ID]`."
        },
        "TemplateUrl": {
            "type": "string",
            "description": "Template source as URL of the CloudFormation template in Amazon S3."
        },
        "Type": {
            "type": "string",
            "description": "Type of provisioning artifact. Valid values: `CLOUD_FORMATION_TEMPLATE`, `MARKETPLACE_AMI`, `MARKETPLACE_CAR` (Marketplace Clusters and AWS Resources)."
        }
    },
    "additionalProperties": false,
    "required": [
        "ProductId"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/CreatedTime",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}