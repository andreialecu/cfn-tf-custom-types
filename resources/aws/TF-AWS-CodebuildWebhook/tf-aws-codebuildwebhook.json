{
    "typeName": "TF::AWS::CodebuildWebhook",
    "description": "Manages a CodeBuild webhook, which is an endpoint accepted by the CodeBuild service to trigger builds from source code repositories. Depending on the source type of the CodeBuild project, the CodeBuild service may also automatically create and delete the actual repository webhook as well.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/aws/TF-AWS-CodebuildWebhook/docs/README.md",
    "definitions": {
        "FilterGroupDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Filter": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/FilterDefinition"
                    }
                }
            },
            "required": []
        },
        "FilterDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "ExcludeMatchedPattern": {
                    "type": "boolean",
                    "description": "If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`."
                },
                "Pattern": {
                    "type": "string",
                    "description": "For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression."
                },
                "Type": {
                    "type": "string",
                    "description": "The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`, `COMMIT_MESSAGE`. At least one filter group must specify `EVENT` as its type."
                }
            },
            "required": [
                "Pattern",
                "Type"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "BranchFilter": {
            "type": "string",
            "description": "A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filter_group` over `branch_filter`."
        },
        "Id": {
            "type": "string"
        },
        "PayloadUrl": {
            "type": "string"
        },
        "ProjectName": {
            "type": "string",
            "description": "The name of the build project."
        },
        "Secret": {
            "type": "string"
        },
        "Url": {
            "type": "string"
        },
        "FilterGroup": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/FilterGroupDefinition"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "ProjectName"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/PayloadUrl",
        "/properties/Secret",
        "/properties/Url"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    },
    "writeOnlyProperties": [
        "/properties/Secret"
    ]
}