{
    "typeName": "TF::AWS::Elb",
    "description": "Provides an Elastic Load Balancer resource, also known as a \"Classic\nLoad Balancer\" after the release of\n[Application/Network Load Balancers](/docs/providers/aws/r/lb.html).\n\n~> **NOTE on ELB Instances and ELB Attachments:** Terraform currently\nprovides both a standalone [ELB Attachment resource](elb_attachment.html)\n(describing an instance attached to an ELB), and an ELB resource with\n`instances` defined in-line. At this time you cannot use an ELB with in-line\ninstances in conjunction with a ELB Attachment resources. Doing so will cause a\nconflict and will overwrite attachments.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/aws/TF-AWS-Elb/docs/README.md",
    "definitions": {
        "TagsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "TagsAllDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "AccessLogsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Bucket": {
                    "type": "string",
                    "description": "The S3 bucket name to store the logs in."
                },
                "BucketPrefix": {
                    "type": "string",
                    "description": "The S3 bucket prefix. Logs are stored in the root if not configured."
                },
                "Enabled": {
                    "type": "boolean",
                    "description": "Boolean to enable / disable `access_logs`. Default is `true`."
                },
                "Interval": {
                    "type": "number",
                    "description": "The publishing interval in minutes. Default: 60 minutes."
                }
            },
            "required": [
                "Bucket"
            ]
        },
        "HealthCheckDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "HealthyThreshold": {
                    "type": "number",
                    "description": "The number of checks before the instance is declared healthy."
                },
                "Interval": {
                    "type": "number",
                    "description": "The interval between checks."
                },
                "Target": {
                    "type": "string",
                    "description": "The target of the check. Valid pattern is \"${PROTOCOL}:${PORT}${PATH}\", where PROTOCOL\nvalues are:\n* `HTTP`, `HTTPS` - PORT and PATH are required\n* `TCP`, `SSL` - PORT is required, PATH is not supported."
                },
                "Timeout": {
                    "type": "number",
                    "description": "The length of time before the check times out."
                },
                "UnhealthyThreshold": {
                    "type": "number",
                    "description": "The number of checks before the instance is declared unhealthy."
                }
            },
            "required": [
                "HealthyThreshold",
                "Interval",
                "Target",
                "Timeout",
                "UnhealthyThreshold"
            ]
        },
        "ListenerDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "InstancePort": {
                    "type": "number",
                    "description": "The port on the instance to route to."
                },
                "InstanceProtocol": {
                    "type": "string",
                    "description": "The protocol to use to the instance. Valid\nvalues are `HTTP`, `HTTPS`, `TCP`, or `SSL`."
                },
                "LbPort": {
                    "type": "number",
                    "description": "The port to listen on for the load balancer."
                },
                "LbProtocol": {
                    "type": "string",
                    "description": "The protocol to listen on. Valid values are `HTTP`,\n`HTTPS`, `TCP`, or `SSL`."
                },
                "SslCertificateId": {
                    "type": "string",
                    "description": "The ARN of an SSL certificate you have\nuploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lb_protocol` is either HTTPS or SSL**."
                }
            },
            "required": [
                "InstancePort",
                "InstanceProtocol",
                "LbPort",
                "LbProtocol"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Arn": {
            "type": "string"
        },
        "AvailabilityZones": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "The AZ's to serve traffic in."
        },
        "ConnectionDraining": {
            "type": "boolean",
            "description": "Boolean to enable connection draining. Default: `false`."
        },
        "ConnectionDrainingTimeout": {
            "type": "number",
            "description": "The time in seconds to allow for connections to drain. Default: `300`."
        },
        "CrossZoneLoadBalancing": {
            "type": "boolean",
            "description": "Enable cross-zone load balancing. Default: `true`."
        },
        "DnsName": {
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "IdleTimeout": {
            "type": "number",
            "description": "The time in seconds that the connection is allowed to be idle. Default: `60`."
        },
        "Instances": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "A list of instance ids to place in the ELB pool."
        },
        "Internal": {
            "type": "boolean",
            "description": "If true, ELB will be an internal ELB."
        },
        "Name": {
            "type": "string",
            "description": "The name of the ELB. By default generated by Terraform."
        },
        "NamePrefix": {
            "type": "string",
            "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`."
        },
        "SecurityGroups": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "A list of security group IDs to assign to the ELB.\nOnly valid if creating an ELB within a VPC."
        },
        "SourceSecurityGroup": {
            "type": "string"
        },
        "SourceSecurityGroupId": {
            "type": "string"
        },
        "Subnets": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "A list of subnet IDs to attach to the ELB."
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsDefinition"
            },
            "description": "A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level."
        },
        "TagsAll": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/TagsAllDefinition"
            }
        },
        "ZoneId": {
            "type": "string"
        },
        "AccessLogs": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/AccessLogsDefinition"
            },
            "maxItems": 1
        },
        "HealthCheck": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/HealthCheckDefinition"
            },
            "maxItems": 1
        },
        "Listener": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/ListenerDefinition"
            },
            "minItems": 1
        }
    },
    "additionalProperties": false,
    "required": [],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Arn",
        "/properties/DnsName",
        "/properties/Id",
        "/properties/SourceSecurityGroupId",
        "/properties/ZoneId"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}