{
    "typeName": "TF::AWS::LambdaEventSourceMapping",
    "description": "Provides a Lambda event source mapping. This allows Lambda functions to get events from Kinesis, DynamoDB, SQS and Managed Streaming for Apache Kafka (MSK).\n\nFor information about Lambda and how to use it, see [What is AWS Lambda?][1].\nFor information about event source mappings, see [CreateEventSourceMapping][2] in the API docs.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/aws/TF-AWS-LambdaEventSourceMapping/docs/README.md",
    "definitions": {
        "DestinationConfigDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "OnFailure": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/OnFailureDefinition"
                    },
                    "maxItems": 1
                }
            },
            "required": []
        },
        "SelfManagedEventSourceDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Endpoints": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/EndpointsDefinition"
                    }
                }
            },
            "required": [
                "Endpoints"
            ]
        },
        "EndpointsDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "MapKey": {
                    "type": "string"
                },
                "MapValue": {
                    "type": "string"
                }
            },
            "required": [
                "MapKey",
                "MapValue"
            ]
        },
        "SourceAccessConfigurationDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Type": {
                    "type": "string"
                },
                "Uri": {
                    "type": "string"
                }
            },
            "required": [
                "Type",
                "Uri"
            ]
        },
        "OnFailureDefinition": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "DestinationArn": {
                    "type": "string"
                }
            },
            "required": [
                "DestinationArn"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "BatchSize": {
            "type": "number",
            "description": "The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS."
        },
        "BisectBatchOnFunctionError": {
            "type": "boolean"
        },
        "Enabled": {
            "type": "boolean",
            "description": "Determines if the mapping will be enabled on creation. Defaults to `true`."
        },
        "EventSourceArn": {
            "type": "string",
            "description": "The event source ARN - this is required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker or MSK cluster.  It is incompatible with a Self Managed Kafka source."
        },
        "FunctionArn": {
            "type": "string"
        },
        "FunctionName": {
            "type": "string",
            "description": "The name or the ARN of the Lambda function that will be subscribing to events."
        },
        "FunctionResponseTypes": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "A list of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`."
        },
        "Id": {
            "type": "string"
        },
        "LastModified": {
            "type": "string"
        },
        "LastProcessingResult": {
            "type": "string"
        },
        "MaximumBatchingWindowInSeconds": {
            "type": "number",
            "description": "The maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer (or accumulate in the case of an SQS queue event source) until either `maximum_batching_window_in_seconds` expires or `batch_size` has been met. For streaming event sources, defaults to as soon as records are available in the stream. If the batch it reads from the stream/queue only has one record in it, Lambda only sends one record to the function. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues."
        },
        "MaximumRecordAgeInSeconds": {
            "type": "number"
        },
        "MaximumRetryAttempts": {
            "type": "number"
        },
        "ParallelizationFactor": {
            "type": "number"
        },
        "Queues": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "The name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. A single queue name must be specified."
        },
        "StartingPosition": {
            "type": "string",
            "description": "The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB or MSK. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType)."
        },
        "StartingPositionTimestamp": {
            "type": "string",
            "description": "A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `starting_position` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen."
        },
        "State": {
            "type": "string"
        },
        "StateTransitionReason": {
            "type": "string"
        },
        "Topics": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "The name of the Kafka topics. Only available for MSK sources. A single topic name must be specified."
        },
        "TumblingWindowInSeconds": {
            "type": "number",
            "description": "The duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis)."
        },
        "Uuid": {
            "type": "string"
        },
        "DestinationConfig": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/DestinationConfigDefinition"
            },
            "maxItems": 1
        },
        "SelfManagedEventSource": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/SelfManagedEventSourceDefinition"
            },
            "maxItems": 1
        },
        "SourceAccessConfiguration": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/SourceAccessConfigurationDefinition"
            },
            "maxItems": 22
        }
    },
    "additionalProperties": false,
    "required": [
        "FunctionName"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/FunctionArn",
        "/properties/Id",
        "/properties/LastModified",
        "/properties/LastProcessingResult",
        "/properties/State",
        "/properties/StateTransitionReason",
        "/properties/Uuid"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": [
                "s3:GetObject",
                "s3:ListBucket"
            ]
        }
    }
}